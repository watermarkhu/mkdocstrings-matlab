{#- Template for MATLAB classes.

This template renders a MATLAB class.

Context:
  class (mkdocstrings_handlers.matlab.models.Class): The class to render.
  root (bool): Whether this is the root object, injected with `:::` in a Markdown page.
  heading_level (int): The HTML heading level to use.
  config (dict): The configuration options.
-#}

{% block logs scoped %}
  {#- Logging block.

  This block can be used to log debug messages, deprecation messages, warnings, etc.
  -#}
  {{ log.debug("Rendering " + class.path) }}
{% endblock logs %}

<div class="doc doc-object doc-class">
  {% with obj = class, html_id = class.path, all_members = class.all_members %}

    {% if root %}
      {% set show_full_path = config.show_root_full_path %}
      {% set root_members = True %}
    {% elif root_members %}
      {% set show_full_path = config.show_root_members_full_path or config.show_object_full_path %}
      {% set root_members = False %}
    {% else %}
      {% set show_full_path = config.show_object_full_path %}
    {% endif %}

    {% set class_name = class.path if show_full_path else class.name %}

    {% if not root or config.show_root_heading %}
      {% filter heading(
          heading_level,
          role="class",
          id=html_id,
          class="doc doc-heading",
          toc_label=('<code class="doc-symbol doc-symbol-toc doc-symbol-class"></code>&nbsp;'|safe if config.show_symbol_type_toc else '') + (config.toc_label if config.toc_label and root else class.name),
        ) %}

        {% block heading scoped %}
          {#- Heading block.

          This block renders the heading for the class.
          -#}
          {% if config.show_symbol_type_heading %}<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>{% endif %}
          {% if config.separate_signature %}
            <span class="doc doc-object-name doc-class-name">{{ config.heading if config.heading and root else class_name }}</span>
          {% elif config.merge_constructor_into_class and class_name in all_members %}
            {% with function = all_members[class_name] %}
              {%+ filter highlight(language="matlab", inline=True) -%}
                {{ class_name }}{% include "signature.html.jinja" with context %}
              {%- endfilter %}
            {% endwith %}
          {% else %}
            <code>{{ class_name }}</code>
          {% endif %}
        {% endblock heading %}

        {% block attributes scoped %}
          {#- attributes block.

          This block renders the attributes for the class.
          -#}
          {% with attributes = class.attributes %}
            {% include "attributes.html.jinja" with context %}
          {% endwith %}
        {% endblock attributes %}

      {% endfilter %}

      {% block signature scoped %}
        {#- Signature block.

        This block renders the signature for the class.
        Overloads of the constructor method are rendered if `merge_constructor_into_class` is enabled.
        The actual constructor method signature is only rendered if `separate_signature` is also enabled.
        -#}
        {% if config.merge_constructor_into_class %}
          {% if class.name in all_members %}
            {% with function = all_members[class.name] %}
              {% if function.overloads and config.show_overloads %}
                <div class="doc-overloads">
                  {% for overload in function.overloads %}
                    {% filter format_signature(overload, config.line_length, annotations=True, crossrefs=config.signature_crossrefs) %}
                      {{ class.name }}
                    {% endfilter %}
                  {% endfor %}
                </div>
              {% endif %}
              {% if config.separate_signature %}
                {% filter format_signature(function, config.line_length, crossrefs=config.signature_crossrefs) %}
                  {{ class.name }}
                {% endfilter %}
              {% endif %}
            {% endwith %}
          {% endif %}
        {% endif %}
      {% endblock signature %}

    {% else %}
      {% if config.show_root_toc_entry %}
        {% filter heading(heading_level,
            role="class",
            id=html_id,
            toc_label=('<code class="doc-symbol doc-symbol-toc doc-symbol-class"></code>&nbsp;'|safe if config.show_symbol_type_toc else '') + (config.toc_label if config.toc_label and root else class.name),
            hidden=True,
          ) %}
        {% endfilter %}
      {% endif %}
      {% set heading_level = heading_level - 1 %}
    {% endif %}

    <div class="doc doc-contents {% if root %}first{% endif %}">
      {% block contents scoped %}
        {#- Contents block.

        This block renders the contents of the class.
        It contains other blocks that users can override.
        Overriding the contents block allows to rearrange the order of the blocks.
        -#}
        {% block bases scoped %}
          {#- Class bases block.

          This block renders the bases for the class.
          -#}
          {% if config.show_bases and class.bases %}
            <p class="doc doc-class-bases">
              Bases: {% for expression in class.bases -%}
                <code>
                  {%- with backlink_type = "subclassed-by" -%}
                    {%- include "expression.html.jinja" with context -%}
                  {%- endwith -%}
                </code>{% if not loop.last %}, {% endif %}
              {% endfor -%}
            </p>
          {% endif %}
        {% endblock bases %}

        {% block diagram scoped %}

        {% endblock diagram %}
        {# This block renders the inheritance diagram #}
          {% if config.show_inheritance_diagram and class.bases %}
            {% with section = class | as_inheritance_diagram_section %}
              {{ section.value|convert_markdown(heading_level, html_id) }}
            {% endwith %}
          {% endif %}
        {% block docstring scoped %}
          {#- Docstring block.

          This block renders the docstring for the class.
          -#}
          {% with docstring_sections = class.docstring.parsed %}
            {% include "docstring.html.jinja" with context %}
          {% endwith %}
          {% if config.merge_constructor_into_class and class.constructor %}
            {# We don't want to merge the inherited constructor method docstring into the class docstring #}
            {# if such inherited method was not selected through `inherited_members`. #}
            {% with check_members = all_members if (config.inherited_members is true or (config.inherited_members is iterable and class.constructor.name in config.inherited_members)) else class.members %}
              {% if class.constructor.name in check_members and class.constructor.has_docstring %}
                {% with function = class.constructor %}
                  {% with obj = function, docstring_sections = function | function_docstring(config.parse_arguments, config.show_docstring_input_arguments, config.show_docstring_name_value_arguments, config.show_docstring_output_arguments) %}
                    {% include "docstring.html.jinja" with context %}
                  {% endwith %}
                {% endwith %}
              {% endif %}
            {% endwith %}
          {% endif %}
        {% endblock docstring %}

        {% if config.backlinks %}
          <backlinks identifier="{{ html_id }}" handler="python" />
        {% endif %}

        {% block summary scoped %}
          {#- Summary block.

          This block renders auto-summaries for classes, methods, and attributes.
          -#}
          {% include "summary.html.jinja" with context %}
        {% endblock summary %}

        {% block source scoped %}
          {#- Source block.

          This block renders the source code for the class.
          -#}
          {% if config.show_source %}
            {% if config.merge_constructor_into_class %}
              {% if class.constructor and class.constructor.source %}
                {% with constructor = class.constructor %}
                  <details class="quote">
                    <summary>Source code in <code>
                      {%- if constructor.relative_filepath.is_absolute() -%}
                        {{ constructor.relative_package_filepath }}
                      {%- else -%}
                        {{ constructor.relative_filepath }}
                      {%- endif -%}
                    </code></summary>
                    {{ constructor.source|highlight(language="matlab", linestart=constructor.lineno or 0, linenums=True) }}
                  </details>
                {% endwith %}
              {% endif %}
            {% elif class.source %}
              <details class="quote">
                <summary>Source code in <code>
                  {%- if class.relative_filepath.is_absolute() -%}
                    {{ class.relative_package_filepath }}
                  {%- else -%}
                    {{ class.relative_filepath }}
                  {%- endif -%}
                </code></summary>
                {{ class.source|highlight(language="matlab", linestart=class.lineno or 0, linenums=True) }}
              </details>
            {% endif %}
          {% endif %}
        {% endblock source %}

        {% block children scoped %}
          {#- Children block.

          This block renders the children (members) of the class.
          -#}
          {% set root = False %}
          {% set heading_level = heading_level + 1 %}
          {% include "children.html.jinja" with context %}
        {% endblock children %}
      {% endblock contents %}
    </div>

  {% endwith %}
</div>
