name: Qualify

on:
  merge_group:
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - synchronize
      - labeled
      - unlabeled
      - edited
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  docs:
    if: contains(github.event.pull_request.labels.*.name, 'documentation')
    name: Test deploy documentation
    uses: ./.github/workflows/docs.yaml
    concurrency:
      group: gh-pages
      cancel-in-progress: false
    secrets: inherit
    with:
      version: ${{ format('pr-{0}', github.head_ref) || 'test' }}
      alias: ""
      set-default: false
      push: true

  test:
    name: Run tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10, 3.11, 3.12, 3.13]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv python pin ${{ matrix.python-version }}
        uv sync --dev

    - name: Run tests
      run: |
        uv run pytest --cov mkdocstrings_handlers.matlab

    - name: Generate test coverage report
      if: always()
      run: |
        echo '### Test Coverage Summary' >> $GITHUB_STEP_SUMMARY
        uv run coverage report --show-missing --format=markdown >> $GITHUB_STEP_SUMMARY

  check-semantic-version:
    name: Check semantic version
    if: github.repository == 'watermarkhu/mkdocstrings-matlab'
    needs: [docs, test]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/create-github-app-token@v2.0.6
      id: app-token
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Get GitHub App User ID
      id: get-user-id
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"

    - name: Checkout repository
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        ref: main

    - name: Create fake commit with PR title
      run: |
        git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
        git switch -c temp-${{ github.run_id }}
        touch temp.txt
        git add temp.txt
        git commit -m "${{ github.event.pull_request.title }}"

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Check next semantic version
      run: |
        uv sync --dev
        NEXT=$(uv run semantic-release --noop version --print-tag)
        CURRENT=$(uv run semantic-release --noop version --print-last-released-tag)
        echo "$NEXT"
        if [ "$NEXT" = "$CURRENT" ]; then
          echo "comment=No release will be made." >> $GITHUB_ENV
        else
          echo "comment=The next release will be $NEXT" >> $GITHUB_ENV
        fi

    - name: Find Comment
      id: fc
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: This comment was written by a bot!

    - name: Create comment
      if: steps.fc.outputs.comment-id == ''
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ${{ env.comment }}
          <!-- This comment was written by a bot! -->
          
    - name: Update comment
      if: steps.fc.outputs.comment-id != ''
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        edit-mode: replace
        body: |
          ${{ env.comment }}
          <!-- This comment was written by a bot! -->
