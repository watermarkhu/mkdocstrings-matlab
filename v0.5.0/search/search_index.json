{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-matlab <p>A MATLAB handler for mkdocstrings.</p> <p></p> <p> </p> <p>The MATLAB handler uses Tree-sitter and its MATLAB parser to collect documentation from MATLAB source code. Via the python bindings the Abstract Syntax Tree (AST) of the source code is traversed to extract useful information. The imported objected are imported as custom Griffe objects and mocked for the python handler. </p> <p>You can install this handler by specifying it as a dependency:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-matlab&gt;=0.X.Y\",\n]\n</code></pre>"},{"location":"#preview","title":"Preview","text":"<p>Let's us quickly see how auto-documentation works with mkdocstrings-matlab:</p> Function making use of Argument Validation in namespace +mynamespace<pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> <p></p> <p></p> <p>Given the function above, the rendered documentation here is created from the following markdown document file,</p> docs/api.md<pre><code>::: mynamespace.typed_function\n    options:\n      parse_arguments: true\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Data collection from source code: collection of the object-tree and the docstrings is done thanks to   Tree-sitter.</p> </li> <li> <p>Support for argument validation blocks: Tree-sitter collects your function and method argument validation    blocks to display input and output argument types and default values.     It is even able to automatically add cross-references o other objects from your API.</p> </li> <li> <p>Recursive documentation of MATLAB namespaces:    just add <code>+</code> to the identifer, and you get the full namespace docs. You don't need to inject documentation for each class, function, and script. Additionaly, the parent namespace documentation will be either extracted from the <code>Contents.m</code> or the <code>readme.md</code> file at the root of the namespace. </p> </li> <li> <p>Support for documented properties: properties definitions followed by a docstring will be recognized in classes. </p> </li> <li> <p>Multiple docstring-styles support: common support for Google-style, Numpydoc-style,   and Sphinx-style docstrings. See Griffe's documentation on docstrings support.</p> </li> <li> <p>Admonition support in Google docstrings: blocks like <code>Note:</code> or <code>Warning:</code> will be transformed   to their admonition equivalent.   We do not support nested admonitions in docstrings!</p> </li> <li> <p>Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table   of Contents, which is nicely displayed by the Material theme. Thanks to mkdocstrings cross-reference ability,   you can reference other objects within your docstrings, with the classic Markdown syntax:   <code>[this object][namespace.subnamespace.object]</code> or directly with <code>[namespace.subnamespace.object][]</code></p> </li> <li> <p>Source code display: mkdocstrings can add a collapsible div containing the highlighted source code of the MATLAB object.</p> </li> </ul>"},{"location":"api/","title":"matlab","text":"<p>Note</p> <p>Due to that for the documentation of mkdocstrings-matlab both the MATLAB and the Python handler are loaded, the symbols shown for Python objects will be incorrect (see Configuration). </p>"},{"location":"api/#mkdocstrings_handlers.matlab","title":"matlab","text":"<p>MATLAB handler for mkdocstrings.</p> <p>Modules:</p> <ul> <li> <code>handler</code>           \u2013            <p>The mkdocstrings handler for processing MATLAB code documentation.</p> </li> <li> <code>collect</code>           \u2013            <p>Functions and classes for collecting MATLAB objects from paths.</p> </li> <li> <code>models</code>           \u2013            <p>Classes to represent MATLAB objects and their properties.</p> </li> <li> <code>treesitter</code>           \u2013            <p>Tree-sitter queries to extract information from MATLAB files.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler","title":"handler","text":"<p>The mkdocstrings handler for processing MATLAB code documentation.</p> <p>Classes:</p> <ul> <li> <code>MatlabHandler</code>           \u2013            <p>The <code>MatlabHandler</code> class is a handler for processing Matlab code documentation.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_handler</code>             \u2013              <p>Create and return a MatlabHandler object with the specified configuration.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler","title":"MatlabHandler","text":"<pre><code>MatlabHandler(*args: Any, config_file_path: str | None = None, paths: list[str] | None = None, paths_recursive: bool = False, locale: str = 'en', **kwargs: Any)\n</code></pre> <p>The <code>MatlabHandler</code> class is a handler for processing Matlab code documentation.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>None</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>collect</code>             \u2013              <p>Collect data given an identifier and user configuration.</p> </li> <li> <code>render</code>             \u2013              <p>Render a template using provided data and configuration options.</p> </li> <li> <code>update_env</code>             \u2013              <p>Update the Jinja environment with custom filters and tests.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>default_config</code>               (<code>dict</code>)           \u2013            <p>Default handler configuration.</p> </li> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>The cross-documentation domain/language for this handler.</p> </li> <li> <code>enable_inventory</code>               (<code>bool</code>)           \u2013            <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> </li> <li> <code>fallback_config</code>               (<code>dict</code>)           \u2013            <p>The configuration used to collect item during autorefs fallback.</p> </li> <li> <code>fallback_theme</code>           \u2013            <p>The fallback theme.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The handler's name.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Variable length argument list.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(config_file_path)","title":"<code>config_file_path</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the configuration file. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(paths)","title":"<code>paths</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of paths to include. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(paths_recursive)","title":"<code>paths_recursive</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to include paths recursively. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(locale)","title":"<code>locale</code>","text":"(<code>str</code>, default:                   <code>'en'</code> )           \u2013            <p>Locale setting. Defaults to \"en\".</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Arbitrary keyword arguments.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.default_config","title":"default_config  <code>class-attribute</code>","text":"<pre><code>default_config: dict = {'show_bases': True, 'show_inheritance_diagram': False, 'show_source': True, 'heading_level': 2, 'parameter_headings': False, 'show_root_heading': False, 'show_root_toc_entry': True, 'show_root_full_path': True, 'show_root_members_full_path': False, 'show_object_full_path': False, 'show_category_heading': False, 'show_symbol_type_heading': False, 'show_symbol_type_toc': False, 'members': None, 'hidden_members': False, 'private_members': False, 'inherited_members': False, 'members_order': alphabetical.value, 'filters': ['!^delete$|^disp$'], 'group_by_category': True, 'summary': False, 'show_labels': True, 'docstring_style': 'google', 'docstring_options': {}, 'docstring_section_style': 'table', 'parse_arguments': False, 'merge_constructor_into_class': False, 'merge_constructor_ignore_summary': False, 'show_if_no_docstring': False, 'show_docstring_propeties': True, 'show_docstring_functions': True, 'show_docstring_classes': True, 'show_docstring_namespaces': True, 'show_docstring_description': True, 'show_docstring_examples': True, 'show_docstring_input_arguments': True, 'show_docstring_name_value_arguments': True, 'show_docstring_output_arguments': True, 'show_signature': True, 'show_signature_annotations': False, 'separate_signature': False, 'signature_crossrefs': False}\n</code></pre> <p>Default handler configuration.</p> <p>General options:</p> <ul> <li> <code>show_bases</code>               (<code>bool</code>)           \u2013            <p>Show the base classes of a class. Default: <code>True</code>.</p> </li> <li> <code>show_inheritance_diagram</code>               (<code>bool</code>)           \u2013            <p>Show the inheritance diagram of a class using Mermaid. Default: <code>False</code>.</p> </li> <li> <code>show_source</code>               (<code>bool</code>)           \u2013            <p>Show the source code of this object. Default: <code>True</code>.</p> </li> </ul> <p>Headings options:</p> <ul> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The initial heading level to use. Default: <code>2</code>.</p> </li> <li> <code>parameter_headings</code>               (<code>bool</code>)           \u2013            <p>Whether to render headings for parameters (therefore showing parameters in the ToC). Default: <code>False</code>.</p> </li> <li> <code>show_root_heading</code>               (<code>bool</code>)           \u2013            <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</p> </li> <li> <code>show_root_toc_entry</code>               (<code>bool</code>)           \u2013            <p>If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</p> </li> <li> <code>show_root_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path for the root object heading. Default: <code>True</code>.</p> </li> <li> <code>show_root_members_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path of the root members. Default: <code>False</code>.</p> </li> <li> <code>show_object_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path of every object. Default: <code>False</code>.</p> </li> <li> <code>show_category_heading</code>               (<code>bool</code>)           \u2013            <p>When grouped by categories, show a heading for each category. Default: <code>False</code>.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr). Default: <code>False</code>.</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr). Default: <code>False</code>.</p> </li> </ul> <p>Members options:</p> <ul> <li> <code>members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of members to render. If true, select all members without further filtering. If false or empty list, do not render members. If none, select all members and apply further filtering with filters and docstrings. Default: <code>None</code>.</p> </li> <li> <code>hidden_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of hidden members to render.  If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any hidden member. Default: <code>False</code>.</p> </li> <li> <code>private_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of private members to render.  If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list,  do not select any private member.  Default: <code>False</code>.</p> </li> <li> <code>inherited_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of inherited members to render. If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any inherited member. Default: <code>False</code>.</p> </li> <li> <code>members_order</code>               (<code>str</code>)           \u2013            <p>The members ordering to use. Options: <code>alphabetical</code> - order by the members names, <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</p> </li> <li> <code>filters</code>               (<code>list[str] | None</code>)           \u2013            <p>A list of filters applied to filter objects based on their name. A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy). Default: <code>[\"!^delete$|^disp$\"]</code>.</p> </li> <li> <code>group_by_category</code>               (<code>bool</code>)           \u2013            <p>Group the object's children by categories: properties, classes, functions, and namespaces. Default: <code>True</code>.</p> </li> <li> <code>summary</code>               (<code>bool | dict[str, bool]</code>)           \u2013            <p>Whether to render summaries of namespaces, classes, functions (methods) and properties. Default: <code>False</code>.</p> </li> <li> <code>show_labels</code>               (<code>bool</code>)           \u2013            <p>Whether to show labels of the members. Default: <code>True</code>.</p> </li> </ul> <p>Docstrings options:</p> <ul> <li> <code>docstring_style</code>               (<code>str</code>)           \u2013            <p>The docstring style to use: <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>. Default: <code>\"google\"</code>.</p> </li> <li> <code>docstring_options</code>               (<code>dict</code>)           \u2013            <p>The options for the docstring parser. See docstring parsers and their options in Griffe docs.</p> </li> <li> <code>docstring_section_style</code>               (<code>str</code>)           \u2013            <p>The style used to render docstring sections. Options: <code>table</code>, <code>list</code>, <code>spacy</code>. Default: <code>\"table\"</code>.</p> </li> <li> <code>parse_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to load inputs and output parameters based on argument validation blocks. Default: <code>True</code>.</p> </li> <li> <code>merge_constructor_into_class</code>               (<code>bool</code>)           \u2013            <p>Whether to merge the constructor method into the class' signature and docstring. Default: <code>False</code>.</p> </li> <li> <code>merge_constructor_ignore_summary</code>               (<code>bool</code>)           \u2013            <p>Whether to ignore the constructor summary when merging it into the class. Default: <code>False</code>.</p> </li> <li> <code>show_if_no_docstring</code>               (<code>bool</code>)           \u2013            <p>Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</p> </li> <li> <code>show_docstring_properties</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Properties\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_functions</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Functions\" or \"Methods\" sections in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_classes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Classes\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_namespaces</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Namespaces\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_description</code>               (<code>bool</code>)           \u2013            <p>Whether to display the textual block (including admonitions) in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_examples</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Examples\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_input_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Input arguments\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_name_value_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Name-value pairs\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_output_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Output arguments\" section in the object's docstring. Default: <code>True</code>.</p> </li> </ul> <p>Signatures/annotations options:</p> <ul> <li> <code>show_signature</code>               (<code>bool</code>)           \u2013            <p>Show methods and functions signatures. Default: <code>True</code>.</p> </li> <li> <code>show_signature_annotations</code>               (<code>bool</code>)           \u2013            <p>Show the type annotations in methods and functions signatures. Default: <code>False</code>.</p> </li> <li> <code>separate_signature</code>               (<code>bool</code>)           \u2013            <p>Whether to put the whole signature in a code block below the heading.</p> </li> <li> <code>signature_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to render cross-references for type annotations in signatures. Default: <code>False</code>.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.domain","title":"domain  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>domain: str = 'mat'\n</code></pre> <p>The cross-documentation domain/language for this handler.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.enable_inventory","title":"enable_inventory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable_inventory: bool = True\n</code></pre> <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.fallback_config","title":"fallback_config  <code>class-attribute</code>","text":"<pre><code>fallback_config: dict = {'fallback': True}\n</code></pre> <p>The configuration used to collect item during autorefs fallback.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.fallback_theme","title":"fallback_theme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fallback_theme = 'material'\n</code></pre> <p>The fallback theme.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'matlab'\n</code></pre> <p>The handler's name.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.collect","title":"collect","text":"<pre><code>collect(identifier: str, config: Mapping[str, Any]) -&gt; CollectorItem\n</code></pre> <p>Collect data given an identifier and user configuration.</p> <p>In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into a Python dictionary for example, though the implementation is completely free.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>CollectorItem</code>           \u2013            <p>CollectorItem</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.collect(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>An identifier for which to collect data.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.collect(config)","title":"<code>config</code>","text":"(<code>Mapping[str, Any]</code>)           \u2013            <p>The handler's configuration options.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.render","title":"render","text":"<pre><code>render(data: CollectorItem, config: Mapping[str, Any]) -&gt; str\n</code></pre> <p>Render a template using provided data and configuration options.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The rendered template as HTML.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.render(data)","title":"<code>data</code>","text":"(<code>CollectorItem</code>)           \u2013            <p>The collected data to render.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.render(config)","title":"<code>config</code>","text":"(<code>Mapping[str, Any]</code>)           \u2013            <p>The handler's configuration options.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.update_env","title":"update_env","text":"<pre><code>update_env(md: Markdown, config: dict) -&gt; None\n</code></pre> <p>Update the Jinja environment with custom filters and tests.</p> <p>Parameters:</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.update_env(md)","title":"<code>md</code>","text":"(<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.MatlabHandler.update_env(config)","title":"<code>config</code>","text":"(<code>dict</code>)           \u2013            <p>The configuration dictionary.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler","title":"get_handler","text":"<pre><code>get_handler(*, theme: str, custom_templates: str | None = None, config_file_path: str | None = None, paths: list[str] | None = None, paths_recursive: bool = False, **config: Any) -&gt; MatlabHandler\n</code></pre> <p>Create and return a MatlabHandler object with the specified configuration.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>MatlabHandler</code> (              <code>MatlabHandler</code> )          \u2013            <p>An instance of MatlabHandler configured with the provided parameters.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(theme)","title":"<code>theme</code>","text":"(<code>str</code>)           \u2013            <p>The theme to be used by the handler.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(custom_templates)","title":"<code>custom_templates</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to custom templates. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(config_file_path)","title":"<code>config_file_path</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to the configuration file. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(paths)","title":"<code>paths</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of paths to include. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(paths_recursive)","title":"<code>paths_recursive</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to include paths recursively. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.handler.get_handler(**config)","title":"<code>**config</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional configuration options.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect","title":"collect","text":"<p>Functions and classes for collecting MATLAB objects from paths.</p> <p>Classes:</p> <ul> <li> <code>LinesCollection</code>           \u2013            <p>A simple dictionary containing the modules source code lines.</p> </li> <li> <code>PathCollection</code>           \u2013            <p>PathCollection is a class that manages a collection of MATLAB paths and their corresponding models.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.LazyModel","title":"LazyModel","text":"<pre><code>LazyModel(path: Path, path_collection: PathCollection)\n</code></pre> <p>A class to lazily collect and model MATLAB objects from a given path.</p> <p>Methods:</p> <ul> <li> <code>is_class_folder</code>             \u2013              <p>Checks if the path is a class folder.</p> </li> <li> <code>is_namespace</code>             \u2013              <p>Checks if the path is a namespace.</p> </li> <li> <code>is_in_namespace</code>             \u2013              <p>Checks if the path is within a namespace.</p> </li> <li> <code>name</code>             \u2013              <p>Returns the name of the MATLAB object, including namespace if applicable.</p> </li> <li> <code>model</code>             \u2013              <p>Collects and returns the MATLAB object model..</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.LinesCollection","title":"LinesCollection","text":"<pre><code>LinesCollection()\n</code></pre> <p>A simple dictionary containing the modules source code lines.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection","title":"PathCollection","text":"<pre><code>PathCollection(matlab_path: Sequence[str | Path], recursive: bool = False, config: Mapping = {})\n</code></pre> <p>PathCollection is a class that manages a collection of MATLAB paths and their corresponding models.</p> <p>Attributes:</p> <ul> <li> <code>config</code>               (<code>Mapping</code>)           \u2013            <p>Configuration settings for the PathCollection.</p> </li> <li> <code>lines_collection</code>               (<code>LinesCollection</code>)           \u2013            <p>An instance of LinesCollection for managing lines.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> </ul> <p>Methods:</p> <ul> <li> <code>members</code>             \u2013              <p>Returns a dictionary of members with their corresponding models.</p> </li> <li> <code>resolve</code>             \u2013              <p>str, config: Mapping = {}) -&gt; MatlabMixin | None: Resolves the given identifier to a model object.</p> </li> <li> <code>update_model</code>             \u2013              <p>MatlabMixin, config: Mapping) -&gt; MatlabMixin: Updates the given model object with the provided configuration.</p> </li> <li> <code>addpath</code>             \u2013              <p>str | Path, to_end: bool = False, recursive: bool = False) -&gt; list[Path]: Adds a path to the search path.</p> </li> <li> <code>rm_path</code>             \u2013              <p>str | Path, recursive: bool = False) -&gt; list[Path]: Removes a path from the search path and updates the namespace and database accordingly.</p> </li> <li> <code>get_inheritance_diagram</code>             \u2013              <p>Class) -&gt; DocstringSectionText | None: Generates an inheritance diagram for the given class model.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If any element in matlab_path is not a string or Path object.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>addpath</code>             \u2013              <p>Add a path to the search path.</p> </li> <li> <code>resolve</code>             \u2013              <p>Resolve an identifier to a MatlabMixin model.</p> </li> <li> <code>rm_path</code>             \u2013              <p>Removes a path from the search path and updates the namespace and database accordingly.</p> </li> <li> <code>update_model</code>             \u2013              <p>Update the given model based on the provided configuration.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection(matlab_path)","title":"<code>matlab_path</code>","text":"(<code>Sequence[str | Path]</code>)           \u2013            <p>A list of strings or Path objects representing the MATLAB paths.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection(recursive)","title":"<code>recursive</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, recursively adds all subdirectories of the given paths to the search path. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection(config)","title":"<code>config</code>","text":"(<code>Mapping</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration settings for the PathCollection. Defaults to {}.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection(matlab_path)","title":"<code>matlab_path</code>","text":"(<code>list[str | Path]</code>)           \u2013            <p>A list of strings or Path objects representing the MATLAB paths.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.addpath","title":"addpath","text":"<pre><code>addpath(path: str | Path, to_end: bool = False, recursive: bool = False)\n</code></pre> <p>Add a path to the search path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li>           \u2013            <p>list[Path]: The previous search path before adding the new path.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.addpath(path)","title":"<code>path</code>","text":"(<code>str | Path</code>)           \u2013            <p>The path to be added.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.addpath(to_end)","title":"<code>to_end</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to add the path to the end of the search path. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.resolve","title":"resolve","text":"<pre><code>resolve(identifier: str, config: Mapping = {})\n</code></pre> <p>Resolve an identifier to a MatlabMixin model.</p> <p>This method attempts to resolve a given identifier to a corresponding MatlabMixin model using the internal mapping and models. If the identifier is not found directly, it will attempt to resolve it by breaking down the identifier into parts and resolving each part recursively.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li>           \u2013            <p>MatlabMixin or None: The resolved MatlabMixin model if found, otherwise None.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.resolve(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>The identifier to resolve.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.resolve(config)","title":"<code>config</code>","text":"(<code>Mapping</code>, default:                   <code>{}</code> )           \u2013            <p>Configuration options to update the model. Defaults to an empty dictionary.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.rm_path","title":"rm_path","text":"<pre><code>rm_path(path: str | Path, recursive: bool = False)\n</code></pre> <p>Removes a path from the search path and updates the namespace and database accordingly.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li>           \u2013            <p>list[Path]: The previous search path before the removal.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.rm_path(path)","title":"<code>path</code>","text":"(<code>str | Path</code>)           \u2013            <p>The path to be removed from the search path.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.rm_path(recursive)","title":"<code>recursive</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, recursively removes all subdirectories of the given path from the search path. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.update_model","title":"update_model","text":"<pre><code>update_model(model: MatlabMixin, config: Mapping) -&gt; MatlabMixin\n</code></pre> <p>Update the given model based on the provided configuration.</p> <p>This method updates the docstring parser and parser options for the model, patches return annotations for MATLAB functions, and optionally creates docstring sections from argument blocks. It also recursively updates members of the model and handles special cases for class constructors and inheritance diagrams.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>MatlabMixin</code> (              <code>MatlabMixin</code> )          \u2013            <p>The updated model.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.update_model(model)","title":"<code>model</code>","text":"(<code>MatlabMixin</code>)           \u2013            <p>The model to update.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathCollection.update_model(config)","title":"<code>config</code>","text":"(<code>Mapping</code>)           \u2013            <p>The configuration dictionary.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.collect.PathGlobber","title":"PathGlobber","text":"<pre><code>PathGlobber(path: Path, recursive: bool = False)\n</code></pre> <p>A class to recursively glob paths as MATLAB would do it.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models","title":"models","text":"<p>Classes to represent MATLAB objects and their properties.</p> <p>Classes:</p> <ul> <li> <code>Class</code>           \u2013            <p>Represents a MATLAB class with additional properties and methods for handling</p> </li> <li> <code>Classfolder</code>           \u2013            <p>A class representing a MATLAB classfolder</p> </li> <li> <code>Docstring</code>           \u2013            <p>A class to represent a docstring with additional sections.</p> </li> <li> <code>Function</code>           \u2013            <p>Represents a MATLAB function with various attributes and properties.</p> </li> <li> <code>MatlabObject</code>           \u2013            <p>Represents a Matlab object with associated docstring, path collection, and parent object.</p> </li> <li> <code>Namespace</code>           \u2013            <p>A class representing a namespace in a MATLAB project.</p> </li> <li> <code>Parameter</code>           \u2013            <p>Represents a parameter in a MATLAB object.</p> </li> <li> <code>Parameters</code>           \u2013            <p>A class to represent a collection of parameters.</p> </li> <li> <code>Script</code>           \u2013            <p>A class representing a MATLAB script.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class","title":"Class","text":"<pre><code>Class(*args: Any, Abstract: bool = False, Hidden: bool = False, Sealed: bool = False, **kwargs: Any)\n</code></pre> <p>Represents a MATLAB class with additional properties and methods for handling MATLAB-specific features.</p> <p>This class extends <code>PathMixin</code>, <code>MatlabObject</code>, and <code>GriffeClass</code> to provide additional functionality for handling MATLAB class properties such as abstract, hidden, and sealed attributes. It also provides methods to retrieve parameters, inherited members, and labels.</p> <p>Attributes:</p> <ul> <li> <code>abstract</code>               (<code>bool</code>)           \u2013            <p>Indicates if the class is abstract.</p> </li> <li> <code>hidden</code>               (<code>bool</code>)           \u2013            <p>Indicates if the class is hidden.</p> </li> <li> <code>sealed</code>               (<code>bool</code>)           \u2013            <p>Indicates if the class is sealed.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> </ul> <p>Attributes:</p> <ul> <li> <code>inherited_members</code>               (<code>dict[str, MatlabObject]</code>)           \u2013            <p>Retrieve a dictionary of inherited members from base classes.</p> </li> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>Retrieve the parameters of the class by grabbing its constructor.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Variable length argument list.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class(Abstract)","title":"<code>Abstract</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the class is abstract</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class(Hidden)","title":"<code>Hidden</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the class is hidden</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class(Sealed)","title":"<code>Sealed</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the class is sealed</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, MatlabObject]\n</code></pre> <p>Retrieve a dictionary of inherited members from base classes.</p> <p>This method iterates over the base classes in reverse order, resolves their models, and collects members that are not already present in the current object's members.</p> <p>Returns:</p> <ul> <li> <code>dict[str, MatlabObject]</code>           \u2013            <p>dict[str, MatlabObject]: A dictionary where the keys are member names and the values are the corresponding MatlabObject instances.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Class.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>Retrieve the parameters of the class by grabbing its constructor.</p> <p>Returns:</p> <ul> <li> <code>Parameters</code> (              <code>Parameters</code> )          \u2013            <p>The parameters of the function if the current member is a function,         otherwise an empty Parameters object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Classfolder","title":"Classfolder","text":"<pre><code>Classfolder(*args: Any, Abstract: bool = False, Hidden: bool = False, Sealed: bool = False, **kwargs: Any)\n</code></pre> <p>A class representing a MATLAB classfolder</p> <p>Attributes:</p> <ul> <li> <code>inherited_members</code>               (<code>dict[str, MatlabObject]</code>)           \u2013            <p>Retrieve a dictionary of inherited members from base classes.</p> </li> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>Retrieve the parameters of the class by grabbing its constructor.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Classfolder.inherited_members","title":"inherited_members  <code>property</code>","text":"<pre><code>inherited_members: dict[str, MatlabObject]\n</code></pre> <p>Retrieve a dictionary of inherited members from base classes.</p> <p>This method iterates over the base classes in reverse order, resolves their models, and collects members that are not already present in the current object's members.</p> <p>Returns:</p> <ul> <li> <code>dict[str, MatlabObject]</code>           \u2013            <p>dict[str, MatlabObject]: A dictionary where the keys are member names and the values are the corresponding MatlabObject instances.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Classfolder.parameters","title":"parameters  <code>property</code>","text":"<pre><code>parameters: Parameters\n</code></pre> <p>Retrieve the parameters of the class by grabbing its constructor.</p> <p>Returns:</p> <ul> <li> <code>Parameters</code> (              <code>Parameters</code> )          \u2013            <p>The parameters of the function if the current member is a function,         otherwise an empty Parameters object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Docstring","title":"Docstring","text":"<pre><code>Docstring(*args: Any, **kwargs: Any)\n</code></pre> <p>A class to represent a docstring with additional sections.</p> <p>This class extends the GriffeDocstring class to include extra sections that can be added to the parsed docstring.</p> <p>Attributes:</p> <ul> <li> <code>_suffixes</code>               (<code>list[DocstringSection]</code>)           \u2013            <p>A list to store additional docstring sections.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>parsed</code>             \u2013              <p>Returns the parsed docstring sections combined with extra sections.</p> </li> <li> <code>_parsed</code>             \u2013              <p>Parses the docstring into structured data.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> </ul> <p>Attributes:</p> <ul> <li> <code>parsed</code>               (<code>list[DocstringSection]</code>)           \u2013            <p>The docstring sections, parsed into structured data.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Docstring(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Variable length argument list.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Docstring(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Arbitrary keyword arguments.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Docstring.parsed","title":"parsed  <code>property</code>","text":"<pre><code>parsed: list[DocstringSection]\n</code></pre> <p>The docstring sections, parsed into structured data.</p> <p>Returns:</p> <ul> <li> <code>list[DocstringSection]</code>           \u2013            <p>list[DocstringSection]: The combined list of parsed and extra docstring sections.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function","title":"Function","text":"<pre><code>Function(*args: Any, returns: Parameters | None = None, Abstract: bool = False, Access: AccessEnum = public, Hidden: bool = False, Sealed: bool = False, Static: bool = False, setter: bool = False, getter: bool = False, **kwargs: Any)\n</code></pre> <p>Represents a MATLAB function with various attributes and properties.</p> <p>Attributes:</p> <ul> <li> <code>parameters</code>               (<code>Parameters</code>)           \u2013            <p>The parameters of the function.</p> </li> <li> <code>returns</code>               (<code>Parameters | None</code>)           \u2013            <p>The return parameters of the function.</p> </li> <li> <code>access</code>               (<code>AccessEnum</code>)           \u2013            <p>The access level of the function.</p> </li> <li> <code>static</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is static.</p> </li> <li> <code>abstract</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is abstract.</p> </li> <li> <code>sealed</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is sealed.</p> </li> <li> <code>hidden</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is hidden.</p> </li> <li> <code>_is_setter</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is a setter.</p> </li> <li> <code>_is_getter</code>               (<code>bool</code>)           \u2013            <p>Indicates if the function is a getter.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(*args)","title":"<code>*args</code>","text":"(<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Variable length argument list.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(returns)","title":"<code>returns</code>","text":"(<code>Parameters | None</code>, default:                   <code>None</code> )           \u2013            <p>The return parameters of the function. Defaults to None.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(Abstract)","title":"<code>Abstract</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is abstract. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(Access)","title":"<code>Access</code>","text":"(<code>AccessEnum</code>, default:                   <code>public</code> )           \u2013            <p>The access level of the function. Defaults to AccessEnum.public.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(Hidden)","title":"<code>Hidden</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is hidden. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(Sealed)","title":"<code>Sealed</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is sealed. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(Static)","title":"<code>Static</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is static. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(setter)","title":"<code>setter</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is a setter. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function(getter)","title":"<code>getter</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates if the function is a getter. Defaults to False.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Function.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.MatlabObject","title":"MatlabObject","text":"<pre><code>MatlabObject(*args, path_collection: PathCollection | None = None, **kwargs)\n</code></pre> <p>Represents a Matlab object with associated docstring, path collection, and parent object.</p> <p>Attributes:</p> <ul> <li> <code>path_collection</code>               (<code>PathCollection | None</code>)           \u2013            <p>The collection of paths related to the Matlab object.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.MatlabObject(*args)","title":"<code>*args</code>","text":"\u2013            <p>Variable length argument list.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.MatlabObject(path_collection)","title":"<code>path_collection</code>","text":"(<code>PathCollection | None</code>, default:                   <code>None</code> )           \u2013            <p>The collection of paths related to the object.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.MatlabObject(**kwargs)","title":"<code>**kwargs</code>","text":"\u2013            <p>Arbitrary keyword arguments.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.models.MatlabObject.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Namespace","title":"Namespace","text":"<pre><code>Namespace(*args: Any, **kwargs: Any)\n</code></pre> <p>A class representing a namespace in a MATLAB project.</p> Inherits from <ul> <li>PathMixin: A mixin class providing path-related functionality.</li> <li>MatlabObject: A base class for MATLAB objects.</li> <li>Module: A class representing a module.</li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Namespace.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Parameter","title":"Parameter","text":"<pre><code>Parameter(*args: Any, kind: ParameterKind | None = None, **kwargs: Any)\n</code></pre> <p>Represents a parameter in a MATLAB object.</p> Inherits from <p>MatlabObject: Base class for MATLAB objects. GriffeParameter: Base class for parameters.</p> <p>Attributes:</p> <ul> <li> <code>kind</code>               (<code>ParameterKind | None</code>)           \u2013            <p>The kind of the parameter, which can be of type ParameterKind or None.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Parameter.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Parameters","title":"Parameters","text":"<pre><code>Parameters(*parameters: Parameter, **kwargs: Any)\n</code></pre> <p>A class to represent a collection of parameters.</p> Inherits from <p>MatlabObject: Base class for MATLAB objects. GriffeParameters: Base class for handling parameters.</p> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Parameters.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.PathMixin","title":"PathMixin","text":"<pre><code>PathMixin(*args: Any, filepath: Path | None = None, **kwargs: Any)\n</code></pre> <p>A mixin class that provides a filepath attribute and related functionality.</p> <p>Attributes:</p> <ul> <li> <code>filepath</code>               (<code>Path | None</code>)           \u2013            <p>The file path associated with the object. It can be None if no file path is provided.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Script","title":"Script","text":"<pre><code>Script(*args: Any, parent: Class | Classfolder | Namespace | _Root | None = None, docstring: Docstring | None = None, **kwargs: Any)\n</code></pre> <p>A class representing a MATLAB script.</p> <p>This class inherits from <code>PathMixin</code> and <code>MatlabObject</code> to provide functionality specific to MATLAB scripts.</p> <p>Attributes:</p> <ul> <li> <code>canonical_path</code>               (<code>str</code>)           \u2013            <p>The full dotted path of this object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.models.Script.canonical_path","title":"canonical_path  <code>property</code>","text":"<pre><code>canonical_path: str\n</code></pre> <p>The full dotted path of this object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The canonical path of the object.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter","title":"treesitter","text":"<p>Tree-sitter queries to extract information from MATLAB files.</p> <p>Classes:</p> <ul> <li> <code>FileParser</code>           \u2013            <p>A class to parse MATLAB files using Tree-sitter.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter.FileParser","title":"FileParser","text":"<pre><code>FileParser(filepath: Path)\n</code></pre> <p>A class to parse MATLAB files using Tree-sitter.</p> <p>Attributes:</p> <ul> <li> <code>filepath</code>               (<code>Path</code>)           \u2013            <p>The path to the MATLAB file.</p> </li> <li> <code>encoding</code>               (<code>str</code>)           \u2013            <p>The encoding of the file content.</p> </li> <li> <code>content</code>           \u2013            <p>Returns the decoded content of the file.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>parse</code>             \u2013              <p>Parses the MATLAB file and returns a MatlabMixin.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> </ul> <p>Methods:</p> <ul> <li> <code>parse</code>             \u2013              <p>Parse the content of the file and return a MatlabMixin.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>content</code>           \u2013            <p>Property that decodes and returns the content using the specified encoding.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter.FileParser(filepath)","title":"<code>filepath</code>","text":"(<code>Path</code>)           \u2013            <p>The path to the file to be processed.</p>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter.FileParser.content","title":"content  <code>property</code>","text":"<pre><code>content\n</code></pre> <p>Property that decodes and returns the content using the specified encoding.</p> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The decoded content.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter.FileParser.parse","title":"parse","text":"<pre><code>parse(**kwargs) -&gt; MatlabMixin\n</code></pre> <p>Parse the content of the file and return a MatlabMixin.</p> <p>This method uses a tree-sitter parser to parse the content of the file and extract relevant information to create a MatlabMixin. It handles different types of Matlab constructs such as functions and classes.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>MatlabMixin</code> (              <code>MatlabMixin</code> )          \u2013            <p>An instance of MatlabMixin representing the parsed content.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the file could not be parsed.</p> </li> </ul>"},{"location":"api/#mkdocstrings_handlers.matlab.treesitter.FileParser.parse(**kwargs)","title":"<code>**kwargs</code>","text":"\u2013            <p>Additional keyword arguments to pass to the parsing methods.</p>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"changelog/#v050-2025-01-03","title":"v0.5.0 (2025-01-03)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Force minor release (#31,   <code>96278d0</code>)</li> </ul>"},{"location":"changelog/#v042-2025-01-03","title":"v0.4.2 (2025-01-03)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>Automatic releases (#29,   <code>3d688d5</code>)</p> </li> <li> <p>Automatic releases (#30,   <code>07819c2</code>)</p> </li> <li> <p>Release artifact and documentation:   (#27,   <code>a0bc3ff</code>)</p> </li> </ul>"},{"location":"changelog/#v041-2025-01-03","title":"v0.4.1 (2025-01-03)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li> <p>Default value of parameter_headings   (#11,   <code>651e25d</code>)</p> </li> <li> <p>fix default value of <code>parameter_headings</code> * add qualify workflow * documentation upgrades</p> </li> </ul>"},{"location":"changelog/#v040-2025-01-02","title":"v0.4.0 (2025-01-02)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li> <p>All options working (#4,   <code>83d1588</code>)</p> </li> <li> <p>add general docs</p> </li> <li> <p>add back parameter_headings option</p> </li> <li> <p>improve headings section</p> </li> <li> <p>bump mkdocstrings-python</p> </li> <li> <p>done with headings section</p> </li> <li> <p>fix inherited members, member order</p> </li> <li> <p>better docs</p> </li> <li> <p>fix docstring parameter handling</p> </li> <li> <p>fixes</p> </li> <li> <p>first attempt at hiding hidden and private members</p> </li> <li> <p>working hidden and private members</p> </li> <li> <p>finalize hidden and private members</p> </li> <li> <p>first attempt summaries</p> </li> <li> <p>summaries almost working</p> </li> <li> <p>comments</p> </li> <li> <p>updates</p> </li> <li> <p>merge constructor</p> </li> <li> <p>docs</p> </li> <li> <p>hide previews</p> </li> <li> <p>docstrings section done</p> </li> <li> <p>finalize signatures</p> </li> <li> <p>update logo</p> </li> <li> <p>first attempt at workflows</p> </li> <li> <p>finalize workflow</p> </li> <li> <p>Fix workflows (#6,   <code>d90cf92</code>)</p> </li> <li> <p>fix workflows</p> </li> <li> <p>set dummy git credentials</p> </li> <li> <p>set permission</p> </li> <li> <p>forgotten input</p> </li> <li> <p>fix</p> </li> </ul>"},{"location":"changelog/#v033-2024-12-19","title":"v0.3.3 (2024-12-19)","text":""},{"location":"credits/","title":"Credits","text":"<p>This project owes its existence to the incredible <code>mkdocstrings</code>, its primary extension <code>mkdocstrings-python</code>, and <code>griffe</code>. These tools handle the templating of parsed content into HTML elements using Jinja templates, allowing much of the code and documentation to be reused and adapted for mkdocstrings-matlab. Special thanks to @paramoy for his efforts.</p> <p>Moreover, <code>mkdocstrings</code> itself extends <code>mkdocs</code> and <code>mkdocs-material</code>, which form the foundation of the entire mkdoc* suite of documentation tools.</p> <p>Finally, the parsing of MATLAB docstrings is powered by Tree-sitter and its MATLAB parser. These libraries enable the parsing of MATLAB source code with exceptional speed and accuracy.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mark Shui Hu\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"snippets/%2Bmodule/module/","title":"Module","text":"Source files  tree <code>readme.md</code> <code>do_something.m</code> <code>aClass.m</code> <code>subfunction.m</code> <code>Contents.m</code> <pre><code>\ud83d\udcc1 +module\n\u251c\u2500\u2500 \ud83d\udcc1 +submodule\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 subfunction.m\n\u251c\u2500\u2500 \ud83d\udcc4 aClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 do_something.m\n\u2514\u2500\u2500 \ud83d\udcc4 readme.m\n</code></pre> <pre><code>Docstring of module.\n\nFunctions:\n    do_something: Do something.\n\nClasses:\n    aClass: Summary\n\nNamespaces:\n    submodule: This is a submodule\n</code></pre> <pre><code>function do_something()\n% Do something.\nend\n</code></pre> <pre><code>classdef aClass\n    % Summary.\n    %\n    % Long description.\n    %\n    % Methods:\n    %     foo: Some method.\n\n    methods\n        function foo()\n            % Summary.\n        end\n    end\nend\n</code></pre> <pre><code>function subfunction\n    % This is a subfunction.\nend\n</code></pre> <pre><code>% This is a submodule\n</code></pre>"},{"location":"snippets/%2Bmodule/readme/","title":"Readme","text":"<p>Docstring of module.</p> <p>Functions:     do_something: Do something.</p> <p>Classes:     aClass: Summary</p> <p>Namespaces:     submodule: This is a submodule</p>"},{"location":"snippets/%2Bmymembers/mymembers/","title":"Mymembers","text":"Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre>"},{"location":"snippets/%2Bmynamespace/mynamespace/","title":"Mynamespace","text":"Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre>"},{"location":"snippets/%2Bmynamespace/readme/","title":"Readme","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"snippets/%2Bundocumented/undocumented/","title":"Undocumented","text":"Source files  tree <code>ClassWithoutDocstring.m</code> <code>function_with_docstring.m</code> <code>function_without_docstring.m</code> <pre><code>\ud83d\udcc1 +undocumented\n\u251c\u2500\u2500 \ud83d\udcc4 ClassWithoutDocstring.m\n\u251c\u2500\u2500 \ud83d\udcc4 function_with_docstring.m\n\u2514\u2500\u2500 \ud83d\udcc4 function_without_docstring.m\n</code></pre> <pre><code>classdef ClassWithoutDocstring\n    methods\n        function obj = method_without_docstring(obj)\n        end\n\n        function obj = method_with_docstring(obj)\n            % Hello\n        end\n    end\nend\n</code></pre> <pre><code>function function_with_docstring()\n    % Hello\nend\n</code></pre> <pre><code>function function_without_docstring()\nend\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>You can install this handler by specifying it as a dependency:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-matlab&gt;=0.X.Y\",\n]\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>For mkdocstrings the default will be the Python handler. You can change the default handler, or explicitely set the MATLAB handler as default by defining the <code>default_handler</code> configuration option of <code>mkdocstrings</code> in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    default_handler: matlab\n    matlab:\n        ...  # the MATLAB handler configuration\n</code></pre> <p>When using the material theme, it is best to also configure the <code>mkdocs_material_matlab</code> plugin. This additional plugin, which is installed together with mkdocstrings-matlab, will overrule the symbols shown with <code>show_symbol_type_heading</code> and <code>show_symbol_type_toc</code> to show the correct symbols as per MATLAB nomenclature. </p> mkdocs.yml<pre><code>plugins:\n- mkdocs_material_matlab\n- mkdocstrings:\n    default_handler: matlab\n    matlab:\n        ...  # the MATLAB handler configuration\n</code></pre> I want to document both MATLAB and Python <p>The <code>mkdocs_material_matlab</code> plugin will also change the symbols for the Python handler. This means that Python modules will not be tagged with symbol <code>mod</code> but <code>name</code> (namespace), and attributes are not tagged with symbol <code>attr</code> but <code>prop</code> (property). </p>"},{"location":"usage/#injecting-documentation","title":"Injecting documentation","text":"<p>With the MATLAB handler installed and configured as default handler, you can inject documentation for a module, class, function, or any other MATLAB object with mkdocstrings' [autodoc syntax], in your Markdown pages:</p> <pre><code>::: path.to.object\n</code></pre> <p>If another handler was defined as default handler, you can explicitely ask for the MATLAB handler to be used when injecting documentation with the <code>handler</code> option:</p> <pre><code>::: path.to.object\n    handler: matlab\n</code></pre> <p>Entire namespaces can be fully documented by prefixing the <code>+</code> character to the namespace that is to be documented. E.g. the following namespace </p> <pre><code>+mynamespace\n|- Contents.m\n|- readme.md\n|- myclass.m\n|- +subnamespace\n|  |- mfunction.m\n</code></pre> <p>is documented with:</p> <pre><code>::: +mynamespace\n</code></pre> <p>The docstring of the namespace is taken from either the <code>Contents.m</code> or a <code>readme.md</code> that resides at the root level of the namespace, with <code>Contents.m</code> taking precedence over <code>readme.md</code>. </p> <p>Documenting a nested namespace requires only a single prefixed <code>+</code> at the start of the fully resolved path, e.g. </p> <pre><code>::: +mynamespace.subnamespace\n</code></pre>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are global only, and go directly under the handler's name.</p>"},{"location":"usage/#paths","title":"<code>paths</code>","text":"<p>This option is used to set the MATLAB search path.  The MATLAB search path is a subset of all the folders in the file system. The order of folders on the search path is important.  When files with the same name appear in multiple folders on the search path,  MATLAB uses the one found in the folder nearest to the top of the search path.</p> <p>Non-absolute paths are computed as relative to MkDocs configuration file. Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        paths: [src]  # search files in the src folder\n</code></pre>"},{"location":"usage/#paths_recursive","title":"<code>paths_recursive</code>","text":"<p>This option allows you to specify whether the handler should recursively search through the directories specified in the <code>paths</code> option. When set to <code>true</code>, the handler will look for MATLAB files in all subdirectories of the specified paths.</p> <p>Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        paths: [src]  # search files in the src folder\n        paths_recursive: true  # search recursively in subfolders\n</code></pre>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: package.module.class\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: various options that do not fit in the other categories</li> <li>Headings options: options related to headings and the table of contents     (or sidebar, depending on the theme used)</li> <li>Members options: options related to filtering or ordering members     in the generated documentation</li> <li>Docstrings options: options related to docstrings (parsing and rendering)</li> <li>Signature options: options related to signatures and type annotations</li> </ul>"},{"location":"usage/#options-summary","title":"Options summary","text":"<p>Default handler configuration.</p> <p>General options:</p> <ul> <li> <code>show_bases</code>               (<code>bool</code>)           \u2013            <p>Show the base classes of a class. Default: <code>True</code>.</p> </li> <li> <code>show_inheritance_diagram</code>               (<code>bool</code>)           \u2013            <p>Show the inheritance diagram of a class using Mermaid. Default: <code>False</code>.</p> </li> <li> <code>show_source</code>               (<code>bool</code>)           \u2013            <p>Show the source code of this object. Default: <code>True</code>.</p> </li> </ul> <p>Headings options:</p> <ul> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The initial heading level to use. Default: <code>2</code>.</p> </li> <li> <code>parameter_headings</code>               (<code>bool</code>)           \u2013            <p>Whether to render headings for parameters (therefore showing parameters in the ToC). Default: <code>False</code>.</p> </li> <li> <code>show_root_heading</code>               (<code>bool</code>)           \u2013            <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</p> </li> <li> <code>show_root_toc_entry</code>               (<code>bool</code>)           \u2013            <p>If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</p> </li> <li> <code>show_root_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path for the root object heading. Default: <code>True</code>.</p> </li> <li> <code>show_root_members_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path of the root members. Default: <code>False</code>.</p> </li> <li> <code>show_object_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full path of every object. Default: <code>False</code>.</p> </li> <li> <code>show_category_heading</code>               (<code>bool</code>)           \u2013            <p>When grouped by categories, show a heading for each category. Default: <code>False</code>.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr). Default: <code>False</code>.</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr). Default: <code>False</code>.</p> </li> </ul> <p>Members options:</p> <ul> <li> <code>members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of members to render. If true, select all members without further filtering. If false or empty list, do not render members. If none, select all members and apply further filtering with filters and docstrings. Default: <code>None</code>.</p> </li> <li> <code>hidden_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of hidden members to render.  If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any hidden member. Default: <code>False</code>.</p> </li> <li> <code>private_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of private members to render.  If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list,  do not select any private member.  Default: <code>False</code>.</p> </li> <li> <code>inherited_members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of inherited members to render. If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any inherited member. Default: <code>False</code>.</p> </li> <li> <code>members_order</code>               (<code>str</code>)           \u2013            <p>The members ordering to use. Options: <code>alphabetical</code> - order by the members names, <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</p> </li> <li> <code>filters</code>               (<code>list[str] | None</code>)           \u2013            <p>A list of filters applied to filter objects based on their name. A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy). Default: <code>[\"!^delete$|^disp$\"]</code>.</p> </li> <li> <code>group_by_category</code>               (<code>bool</code>)           \u2013            <p>Group the object's children by categories: properties, classes, functions, and namespaces. Default: <code>True</code>.</p> </li> <li> <code>summary</code>               (<code>bool | dict[str, bool]</code>)           \u2013            <p>Whether to render summaries of namespaces, classes, functions (methods) and properties. Default: <code>False</code>.</p> </li> <li> <code>show_labels</code>               (<code>bool</code>)           \u2013            <p>Whether to show labels of the members. Default: <code>True</code>.</p> </li> </ul> <p>Docstrings options:</p> <ul> <li> <code>docstring_style</code>               (<code>str</code>)           \u2013            <p>The docstring style to use: <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>. Default: <code>\"google\"</code>.</p> </li> <li> <code>docstring_options</code>               (<code>dict</code>)           \u2013            <p>The options for the docstring parser. See docstring parsers and their options in Griffe docs.</p> </li> <li> <code>docstring_section_style</code>               (<code>str</code>)           \u2013            <p>The style used to render docstring sections. Options: <code>table</code>, <code>list</code>, <code>spacy</code>. Default: <code>\"table\"</code>.</p> </li> <li> <code>parse_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to load inputs and output parameters based on argument validation blocks. Default: <code>True</code>.</p> </li> <li> <code>merge_constructor_into_class</code>               (<code>bool</code>)           \u2013            <p>Whether to merge the constructor method into the class' signature and docstring. Default: <code>False</code>.</p> </li> <li> <code>merge_constructor_ignore_summary</code>               (<code>bool</code>)           \u2013            <p>Whether to ignore the constructor summary when merging it into the class. Default: <code>False</code>.</p> </li> <li> <code>show_if_no_docstring</code>               (<code>bool</code>)           \u2013            <p>Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</p> </li> <li> <code>show_docstring_properties</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Properties\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_functions</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Functions\" or \"Methods\" sections in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_classes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Classes\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_namespaces</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Namespaces\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_description</code>               (<code>bool</code>)           \u2013            <p>Whether to display the textual block (including admonitions) in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_examples</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Examples\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_input_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Input arguments\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_name_value_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Name-value pairs\" section in the object's docstring. Default: <code>True</code>.</p> </li> <li> <code>show_docstring_output_arguments</code>               (<code>bool</code>)           \u2013            <p>Whether to display the \"Output arguments\" section in the object's docstring. Default: <code>True</code>.</p> </li> </ul> <p>Signatures/annotations options:</p> <ul> <li> <code>show_signature</code>               (<code>bool</code>)           \u2013            <p>Show methods and functions signatures. Default: <code>True</code>.</p> </li> <li> <code>show_signature_annotations</code>               (<code>bool</code>)           \u2013            <p>Show the type annotations in methods and functions signatures. Default: <code>False</code>.</p> </li> <li> <code>separate_signature</code>               (<code>bool</code>)           \u2013            <p>Whether to put the whole signature in a code block below the heading.</p> </li> <li> <code>signature_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to render cross-references for type annotations in signatures. Default: <code>False</code>.</p> </li> </ul>"},{"location":"usage/configuration/docstrings/","title":"Docstrings options","text":""},{"location":"usage/configuration/docstrings/#docstring_style","title":"<code>docstring_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"google\"</code></li> </ul> <p>The docstring style to expect when parsing docstrings.</p> <p>Possible values:</p> <ul> <li><code>\"google\"</code>: see Google style.</li> <li><code>\"numpy\"</code>: see Numpy style.</li> <li><code>\"sphinx\"</code>: see Sphinx style.</li> <li><code>None</code> (<code>null</code> or <code>~</code> in YAML): no style at all, parse as regular text.</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          docstring_style: google\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      docstring_style: numpy\n</code></pre> Preview <p>Every style gets rendered the same way. Here are some docstring examples.</p> GoogleNumpySphinx <pre><code>function message = greet(name)\n    % Greet someone.\n    %  \n    % Parameters:\n    %     name: The name of the person to greet.\n    % \n    % Returns:\n    %     message: A greeting message.\n\n    message = sprintf(\"Hello %s!\", name)\nend\n</code></pre> <pre><code>function message = greet(name)\n    % Greet someone.\n    %  \n    % Parameters\n    % ----------\n    % name\n    %    The name of the person to greet.\n    % \n    % Returns\n    % -------\n    % message\n    %    A greeting message.\n\n    message = sprintf(\"Hello %s!\", name)\nend\n</code></pre> <pre><code>function message = greet(name)\n    % Greet someone.\n    %  \n    % :param name: The name of the person to greet.\n    % :return: A greeting message.\n\n    message = sprintf(\"Hello %s!\", name)\nend\n</code></pre>"},{"location":"usage/configuration/docstrings/#docstring_options","title":"<code>docstring_options</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The options for the docstring parser.</p> <ul> <li>Google-style options</li> <li>Numpydoc-style options</li> </ul> <p>The Sphinx style does not offer any option.</p> <p>Most of the options in the linked pages will not have an effect to mkdocstrings-matlab, since here the objects are mocked as Python objects are docstrings are injected into the mocked objects. </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          docstring_options:\n            warn_unknown_params: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      docstring_options:\n        warn_unknown_params: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#docstring_section_style","title":"<code>docstring_section_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"table\"</code></li> </ul> <p>The style used to render docstring sections.</p> <p>A section is a block of text that has a special meaning in a docstring. There are sections for documenting attributes of an object, parameters of a function, exceptions raised by a function, the return value of a function, etc.</p> <p>Sections are parsed as structured data and can therefore be rendered in different ways. Possible values:</p> <ul> <li><code>\"table\"</code>: a simple table, usually with type, name and description columns</li> <li><code>\"list\"</code>: a simple list, akin to what you get with the [ReadTheDocs Sphinx theme]{ .external }</li> <li><code>\"spacy\"</code>: a poor implementation of the amazing tables in [Spacy's documentation]{ .external }</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          docstring_section_style: table\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      docstring_section_style: list\n</code></pre> Preview TableListSpacy <p>Tables work well when you have lots of items with short names, type annotations, descriptions, etc.. With longer strings, the columns risk getting squished horizontally. In that case, the Spacy tables can help.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>threshold</code> Threshold for something. required <code>bool</code> <code>flag</code> Enable something. <code>False</code> <p>Other Parameters:</p> Type Name Description Default <code>list[int | float]</code> <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. required <code>VacuumType | Literal[\"regular\"]</code> <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <code>VacuumType.PLASMA</code> <p>Lists work well whatever the length of names, type annotations, descriptions, etc.</p> <p>Parameters:</p> <ul> <li><code>threshold</code> (<code>int</code>) \u2014 Threshold for something.</li> <li><code>flag</code> (<code>bool</code>) \u2014 Enable something.</li> </ul> <p>Other Parameters:</p> <ul> <li><code>gravity_forces</code> (<code>list[int | float]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> <li><code>vacuum_type</code> (<code>VacuumType | Literal[\"regular\"]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> </ul> <p>Spacy tables work better than regular tables with longer names, type annotations, descriptions, etc., by reserving more horizontal space on the second column.</p> <p>Parameters:</p> Name Description <code>threshold</code> Threshold for something.TYPE: <code>int</code> DEFAULT: required <code>flag</code> Enable something.TYPE: <code>bool</code> DEFAULT: <code>False</code> <p>Other Parameters:</p> Name Description <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE: <code>list[int | float]</code> DEFAULT: required <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE:<code>VacuumType | Literal[\"regular\"]</code> DEFAULT: <code>VacuumType.PLASMA</code>"},{"location":"usage/configuration/docstrings/#parse_arguments","title":"<code>parse_arguments</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to load inputs and output parameters based on argument validation blocks.</p> <p>Similarly to Python, MATLAB is by default not a typed language. Function and method arguments are dynamically typed, in most cases. This provides flexibility, but is generally bad behavior if the code is meant for production or is intended to be exposed as an API. </p> <p>In MATLAB R2019b the concept of Argument Definitions was introduced. Within an arguments block, the type, size, or other aspects of the inputs (and outputs since R2022b) can be verified. </p> <pre><code>function z = mySharedFunction(x,y,NameValueArgs)\n   arguments\n      x (1,1) double     % scalar\n      y double {mustBeVector,mustBePositive} \n      NameValueArgs.A string\n      NameValueArgs.B string = \"default\"\n   end \n...\nend\n</code></pre> <p>The mkdocstrings-matlab plugin is able to parse the argument blocks and extract the type and default information, and any comment after each Argument Definition will be parsed as the argument docstring. If if <code>parse_arguments</code> is enabled, sections will be rendered for the parameters, name-value pairs and the return arguments of functions and methods. These sections can be individually toggled with <code>show_docstring_input_arguments</code>, <code>show_docstring_name_value_arguments</code> and <code>show_docstring_output_arguments</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          parse_arguments: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mynamespace.typed_function\n    options:\n      parse_arguments: true\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview: Cross-references Parse argument validationDon't parse argument validation <pre><code>::: mynamespace.typed_function\n    options:\n      parse_arguments: true\n</code></pre> <pre><code>::: mynamespace.typed_function\n    options:\n      parse_arguments: false\n</code></pre> <p>Note</p> <p>Prior to MATLAB R2019b, the functionality of the arguments blocks was most commonly achieved through <code>inputParser</code>. The validations created with <code>inputParser</code> will not be parsed by mkdocstrings-matlab, since it does not have a strict syntax as opposed to Argument Definitions. </p>"},{"location":"usage/configuration/docstrings/#mynamespace.typed_function","title":"<code>mynamespace.typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>string</code> <p>The input variable</p> required <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p> <p>Returns:</p> Name Type Description <code>output</code> <code>char</code> <p>The output variable</p>"},{"location":"usage/configuration/docstrings/#mynamespace.typed_function","title":"<code>mynamespace.typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p>"},{"location":"usage/configuration/docstrings/#merge_constructor_into_class","title":"<code>merge_constructor_into_class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to merge the constructor method into the class' signature and docstring.</p> <p>By default, only the class name is rendered in headings. When merging, the constructor method parameters are added after the class name, like a signature, and the constructor method docstring is appended to the class' docstring. This option is well used in combination with the <code>merge_constructor_ignore_summary</code> option, to discard the first line of the constructor docstring which is not often useful.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          merge_constructor_into_class: true\n          merge_constructor_ignore_summary: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      merge_constructor_into_class: true\n      merge_constructor_ignore_summary: true\n</code></pre> <code>Thing.m</code> <pre><code>classdef Thing\n% Class docstring\n\nmethods \n    function obj = Thing(value)\n        % Initialize a thing.\n        arguments\n            value % The thing's value.\n        end\n        obj.value = value;\n    end\nend\n\nproperties (Access = private)\n    value % The thing's value.\nend\n\nend\n</code></pre> Preview Merged, summary discardedMerged, summary keptUnmerged <pre><code>::: Thing\n    options:\n      merge_constructor_into_class: true\n      merge_constructor_ignore_summary: true\n</code></pre> <pre><code>::: Thing\n    options:\n      merge_constructor_into_class: true\n      merge_constructor_ignore_summary: false\n</code></pre> <pre><code>::: Thing\n    options:\n      merge_constructor_into_class: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#Thing","title":"<code>Thing</code>","text":"<p>Class docstring</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The thing's value.</p> required"},{"location":"usage/configuration/docstrings/#Thing","title":"<code>Thing</code>","text":"<p>Class docstring</p> <p>Initialize a thing.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The thing's value.</p> required"},{"location":"usage/configuration/docstrings/#Thing","title":"<code>Thing</code>","text":"<p>Class docstring</p>"},{"location":"usage/configuration/docstrings/#Thing.Thing","title":"<code>Thing(value)</code>","text":"<p>Initialize a thing.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The thing's value.</p> required"},{"location":"usage/configuration/docstrings/#show_if_no_docstring","title":"<code>show_if_no_docstring</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the object heading even if it has no docstring or children with docstrings.</p> <p>Without an explicit list of <code>members</code>, members are selected based on <code>filters</code>, and then filtered again to keep only those with docstrings. Checking if a member has a docstring is done recursively: if at least one of its direct or indirect members (lower in the tree) has a docstring, the member is rendered. If the member does not have a docstring, and none of its members have a docstring, it is excluded.</p> <p>With this option you can tell the Python handler to skip the docstring check.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_if_no_docstring: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: +undocumented\n    options:\n      show_if_no_docstring: true\n</code></pre> Source files  tree <code>ClassWithoutDocstring.m</code> <code>function_with_docstring.m</code> <code>function_without_docstring.m</code> <pre><code>\ud83d\udcc1 +undocumented\n\u251c\u2500\u2500 \ud83d\udcc4 ClassWithoutDocstring.m\n\u251c\u2500\u2500 \ud83d\udcc4 function_with_docstring.m\n\u2514\u2500\u2500 \ud83d\udcc4 function_without_docstring.m\n</code></pre> <pre><code>classdef ClassWithoutDocstring\n    methods\n        function obj = method_without_docstring(obj)\n        end\n\n        function obj = method_with_docstring(obj)\n            % Hello\n        end\n    end\nend\n</code></pre> <pre><code>function function_with_docstring()\n    % Hello\nend\n</code></pre> <pre><code>function function_without_docstring()\nend\n</code></pre> Preview ShowDon't show <pre><code>::: +undocumented\n    options:\n      show_if_no_docstring: true\n</code></pre> <pre><code>::: +undocumented\n    options:\n      show_if_no_docstring: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#undocumented","title":"<code>undocumented</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.ClassWithoutDocstring","title":"<code>ClassWithoutDocstring</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.ClassWithoutDocstring.method_without_docstring","title":"<code>method_without_docstring()</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.ClassWithoutDocstring.method_with_docstring","title":"<code>method_with_docstring()</code>","text":"<p>Hello</p>"},{"location":"usage/configuration/docstrings/#undocumented.function_without_docstring","title":"<code>function_without_docstring()</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.function_with_docstring","title":"<code>function_with_docstring()</code>","text":"<p>Hello</p>"},{"location":"usage/configuration/docstrings/#undocumented","title":"<code>undocumented</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.ClassWithoutDocstring","title":"<code>ClassWithoutDocstring</code>","text":""},{"location":"usage/configuration/docstrings/#undocumented.ClassWithoutDocstring.method_with_docstring","title":"<code>method_with_docstring()</code>","text":"<p>Hello</p>"},{"location":"usage/configuration/docstrings/#undocumented.function_with_docstring","title":"<code>function_with_docstring()</code>","text":"<p>Hello</p>"},{"location":"usage/configuration/docstrings/#show_docstring_properties","title":"<code>show_docstring_properties</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Properties\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_properties: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_properties: false\n</code></pre> <code>Class.m</code> <pre><code>classdef Class\n    % Summary.\n    %\n    % Long description.\n    %\n    % Warning: Deprecated\n    %     Stop using this class.\n    %\n    % Properties:\n    %     attr: Some attribute.\n\n    properties\n        attr int = 1\n    end\nend\n</code></pre> Preview With propertiesWithout properties <pre><code>::: Class\n    options:\n      show_docstring_properties: true\n</code></pre> <pre><code>::: Class\n    options:\n      show_docstring_properties: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#Class","title":"<code>Class</code>","text":"<p>Summary.</p> <p>Long description.</p> Deprecated <p>Stop using this class.</p> <p>Properties:</p> Name Type Description <code>attr</code> <p>Some attribute.</p>"},{"location":"usage/configuration/docstrings/#Class","title":"<code>Class</code>","text":"<p>Summary.</p> <p>Long description.</p> Deprecated <p>Stop using this class.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_functions","title":"<code>show_docstring_functions</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Functions\" or \"Methods\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_functions: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_functions: false\n</code></pre> Source files  tree <code>readme.md</code> <code>do_something.m</code> <code>aClass.m</code> <code>subfunction.m</code> <code>Contents.m</code> <pre><code>\ud83d\udcc1 +module\n\u251c\u2500\u2500 \ud83d\udcc1 +submodule\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 subfunction.m\n\u251c\u2500\u2500 \ud83d\udcc4 aClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 do_something.m\n\u2514\u2500\u2500 \ud83d\udcc4 readme.m\n</code></pre> <pre><code>Docstring of module.\n\nFunctions:\n    do_something: Do something.\n\nClasses:\n    aClass: Summary\n\nNamespaces:\n    submodule: This is a submodule\n</code></pre> <pre><code>function do_something()\n% Do something.\nend\n</code></pre> <pre><code>classdef aClass\n    % Summary.\n    %\n    % Long description.\n    %\n    % Methods:\n    %     foo: Some method.\n\n    methods\n        function foo()\n            % Summary.\n        end\n    end\nend\n</code></pre> <pre><code>function subfunction\n    % This is a subfunction.\nend\n</code></pre> <pre><code>% This is a submodule\n</code></pre> Preview With methodsWithout methodsWith functionsWithout functions <pre><code>::: module.aClass\n    options:\n      show_docstring_functions: true\n</code></pre> <pre><code>::: module.aClass\n    options:\n      show_docstring_functions: false\n</code></pre> <pre><code>::: +module\n    options:\n      show_docstring_functions: true\n      members: false\n</code></pre> <pre><code>::: +module\n    options:\n      show_docstring_functions: false\n      members: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#module.aClass","title":"<code>module.aClass</code>","text":"<p>Summary.</p> <p>Long description.</p> <p>Methods:</p> Name Description <code>foo</code> <p>Some method.</p>"},{"location":"usage/configuration/docstrings/#module.aClass.foo","title":"<code>foo()</code>","text":"<p>Summary.</p>"},{"location":"usage/configuration/docstrings/#module.aClass","title":"<code>module.aClass</code>","text":"<p>Summary.</p> <p>Long description.</p>"},{"location":"usage/configuration/docstrings/#module.aClass.foo","title":"<code>foo()</code>","text":"<p>Summary.</p>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Functions:</p> Name Description <code>do_something</code> <p>Do something.</p> <p>Classes:</p> Name Description <code>aClass</code> <p>Summary</p> <p>Namespaces:</p> Name Description <code>submodule</code> <p>This is a submodule</p>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Classes:</p> Name Description <code>aClass</code> <p>Summary</p> <p>Namespaces:</p> Name Description <code>submodule</code> <p>This is a submodule</p>"},{"location":"usage/configuration/docstrings/#show_docstring_classes","title":"<code>show_docstring_classes</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Classes\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_classes: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: +matlab_namespace\n    options:\n      show_docstring_classes: false\n</code></pre> Source files  tree <code>readme.md</code> <code>do_something.m</code> <code>aClass.m</code> <code>subfunction.m</code> <code>Contents.m</code> <pre><code>\ud83d\udcc1 +module\n\u251c\u2500\u2500 \ud83d\udcc1 +submodule\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 subfunction.m\n\u251c\u2500\u2500 \ud83d\udcc4 aClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 do_something.m\n\u2514\u2500\u2500 \ud83d\udcc4 readme.m\n</code></pre> <pre><code>Docstring of module.\n\nFunctions:\n    do_something: Do something.\n\nClasses:\n    aClass: Summary\n\nNamespaces:\n    submodule: This is a submodule\n</code></pre> <pre><code>function do_something()\n% Do something.\nend\n</code></pre> <pre><code>classdef aClass\n    % Summary.\n    %\n    % Long description.\n    %\n    % Methods:\n    %     foo: Some method.\n\n    methods\n        function foo()\n            % Summary.\n        end\n    end\nend\n</code></pre> <pre><code>function subfunction\n    % This is a subfunction.\nend\n</code></pre> <pre><code>% This is a submodule\n</code></pre> Preview With classesWithout classes <pre><code>::: +module\n    options:\n      show_docstring_classes: true\n      members: false\n</code></pre> <pre><code>::: +module\n    options:\n      show_docstring_classes: false\n      members: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Functions:</p> Name Description <code>do_something</code> <p>Do something.</p> <p>Classes:</p> Name Description <code>aClass</code> <p>Summary</p> <p>Namespaces:</p> Name Description <code>submodule</code> <p>This is a submodule</p>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Functions:</p> Name Description <code>do_something</code> <p>Do something.</p> <p>Namespaces:</p> Name Description <code>submodule</code> <p>This is a submodule</p>"},{"location":"usage/configuration/docstrings/#show_docstring_namespaces","title":"<code>show_docstring_namespaces</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Namespaces\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_namespaces: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: +matlab_namespace\n    options:\n      show_docstring_namespaces: false\n</code></pre> <pre><code>\ud83d\udcc1 module/\n\u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u2514\u2500\u2500 \ud83d\udcc4 submodule.py\n</code></pre> Source files  tree <code>readme.md</code> <code>do_something.m</code> <code>aClass.m</code> <code>subfunction.m</code> <code>Contents.m</code> <pre><code>\ud83d\udcc1 +module\n\u251c\u2500\u2500 \ud83d\udcc1 +submodule\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 subfunction.m\n\u251c\u2500\u2500 \ud83d\udcc4 aClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 do_something.m\n\u2514\u2500\u2500 \ud83d\udcc4 readme.m\n</code></pre> <pre><code>Docstring of module.\n\nFunctions:\n    do_something: Do something.\n\nClasses:\n    aClass: Summary\n\nNamespaces:\n    submodule: This is a submodule\n</code></pre> <pre><code>function do_something()\n% Do something.\nend\n</code></pre> <pre><code>classdef aClass\n    % Summary.\n    %\n    % Long description.\n    %\n    % Methods:\n    %     foo: Some method.\n\n    methods\n        function foo()\n            % Summary.\n        end\n    end\nend\n</code></pre> <pre><code>function subfunction\n    % This is a subfunction.\nend\n</code></pre> <pre><code>% This is a submodule\n</code></pre> Preview With namespacesWithout namespaces <pre><code>::: +module\n    options:\n      show_docstring_namespaces: true\n      members: false\n</code></pre> <pre><code>::: +module\n    options:\n      show_docstring_namespaces: false\n      members: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Functions:</p> Name Description <code>do_something</code> <p>Do something.</p> <p>Classes:</p> Name Description <code>aClass</code> <p>Summary</p> <p>Namespaces:</p> Name Description <code>submodule</code> <p>This is a submodule</p>"},{"location":"usage/configuration/docstrings/#module","title":"<code>module</code>","text":"<p>Docstring of module.</p> <p>Functions:</p> Name Description <code>do_something</code> <p>Do something.</p> <p>Classes:</p> Name Description <code>aClass</code> <p>Summary</p>"},{"location":"usage/configuration/docstrings/#show_docstring_description","title":"<code>show_docstring_description</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the textual blocks (including admonitions) of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_description: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_description: false\n</code></pre> <code>Class.m</code> <pre><code>classdef Class\n    % Summary.\n    %\n    % Long description.\n    %\n    % Warning: Deprecated\n    %     Stop using this class.\n    %\n    % Properties:\n    %     attr: Some attribute.\n\n    properties\n        attr int = 1\n    end\nend\n</code></pre> Preview With description blocksWithout description blocks <pre><code>::: Class\n    options:\n      show_docstring_description: true\n</code></pre> <pre><code>::: Class\n    options:\n      show_docstring_description: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#Class","title":"<code>Class</code>","text":"<p>Summary.</p> <p>Long description.</p> Deprecated <p>Stop using this class.</p> <p>Properties:</p> Name Type Description <code>attr</code> <p>Some attribute.</p>"},{"location":"usage/configuration/docstrings/#Class","title":"<code>Class</code>","text":"<p>Properties:</p> Name Type Description <code>attr</code> <p>Some attribute.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_examples","title":"<code>show_docstring_examples</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Examples\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_examples: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_examples: false\n</code></pre> <code>print_hello.m</code> <pre><code>function print_hello()\n    % Print hello.\n    %\n    % Examples:\n    %     &gt;&gt;&gt; print(\"hello\")\n    %     % hello\n    fprintf(\"hello\\n\")\nend\n</code></pre> Preview With examplesWithout examples <pre><code>::: print_hello\n    options:\n      show_docstring_examples: true\n</code></pre> <pre><code>::: print_hello\n    options:\n      show_docstring_examples: false\n</code></pre>"},{"location":"usage/configuration/docstrings/#print_hello","title":"<code>print_hello()</code>","text":"<p>Print hello.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(\"hello\")\n% hello\n</code></pre>"},{"location":"usage/configuration/docstrings/#print_hello","title":"<code>print_hello()</code>","text":"<p>Print hello.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_input_arguments","title":"<code>show_docstring_input_arguments</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Parameters\" sections of docstrings. The accepted title headings are <code>inputs</code> or <code>input arguments</code> (case-insensitive). </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_input_arguments: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_input_arguments: false\n</code></pre> <code>do_something.m</code> <pre><code>function do_something(whatever)\n% Do something.\n%\n% Parameters:\n%     whatever: Some integer.\n    arguments\n        whatever (1,1) double {mustBeInteger} = 1 % A integer\n    end\nend\n</code></pre> Preview With parametersWithout parameters <pre><code>::: do_something\n    options:\n      show_docstring_input_arguments: true\n</code></pre> <pre><code>::: do_something\n    options:\n      show_docstring_input_arguments: false\n</code></pre> <p>Warning</p> <p>If a <code>Input arguments</code> section is provided in the docstring, the description here will overule the parsed values from the argument validation block (see <code>parse_arguments</code>).</p>"},{"location":"usage/configuration/docstrings/#do_something","title":"<code>do_something(whatever=1)</code>","text":"<p>Do something.</p> <p>Input arguments:</p> Name Type Description Default <code>whatever</code> <p>Some integer.</p> required"},{"location":"usage/configuration/docstrings/#do_something","title":"<code>do_something(whatever=1)</code>","text":"<p>Do something.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_name_value_arguments","title":"<code>show_docstring_name_value_arguments</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Name-value pairs\" sections of docstrings. The accepted title headings are <code>name-value pairs</code> or <code>name-value arguments</code> (case-insensitive). </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_name_value_arguments: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_name_value_arguments: false\n</code></pre> <code>do_varargin.m</code> <pre><code>function do_varargin(varargin)\n% Do something.\n%\n% Name-Value pairs:\n%     whatever: Some value.\nend\n</code></pre> Preview With parametersWithout parameters <pre><code>::: do_varargin\n    options:\n      show_docstring_name_value_arguments: true\n</code></pre> <pre><code>::: do_varargin\n    options:\n      show_docstring_name_value_arguments: false\n</code></pre> <p>Warning</p> <p>If a <code>Name-value arguments</code> section is provided in the docstring, the description here will overule the parsed values from the argument validation block (see <code>parse_arguments</code>).</p>"},{"location":"usage/configuration/docstrings/#do_varargin","title":"<code>do_varargin(varargin)</code>","text":"<p>Do something.</p> <p>Name-Value Arguments:</p> Name Type Description <code>whatever</code> <p>Some value.</p>"},{"location":"usage/configuration/docstrings/#do_varargin","title":"<code>do_varargin(varargin)</code>","text":"<p>Do something.</p>"},{"location":"usage/configuration/docstrings/#show_docstring_output_arguments","title":"<code>show_docstring_output_arguments</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Returns\" sections of docstrings. The accepted title headings are <code>outputs</code> or <code>output arguments</code> (case-insensitive). </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_docstring_output_arguments: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_docstring_output_arguments: false\n</code></pre> <code>do_output.m</code> <pre><code>function value = do_output()\n% Do something.\n%\n% outputs:\n%     value: Some value.\nend\n</code></pre> Preview With parametersWithout parameters <pre><code>::: do_output\n    options:\n      show_docstring_output_arguments: true\n</code></pre> <pre><code>::: do_output\n    options:\n      show_docstring_output_arguments: false\n</code></pre> <p>Warning</p> <p>If a <code>Output arguments</code> section is provided in the docstring, the description here will overule the parsed values from the argument validation block (see <code>parse_arguments</code>).</p>"},{"location":"usage/configuration/docstrings/#do_output","title":"<code>do_output()</code>","text":"<p>Do something.</p> <p>Output arguments:</p> Name Type Description <code>value</code> <p>Some value.</p>"},{"location":"usage/configuration/docstrings/#do_output","title":"<code>do_output()</code>","text":"<p>Do something.</p>"},{"location":"usage/configuration/general/","title":"General options","text":""},{"location":"usage/configuration/general/#show_bases","title":"<code>show_bases</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the base classes of a class.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_bases: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n        show_bases: false\n</code></pre> <code>myClass.m</code> <pre><code>classdef myClass &lt; myParent\n    % Docstring of myClass.\nend\n</code></pre> Preview with baseswithout bases <pre><code>::: myClass\n    options:\n        show_bases: true\n</code></pre> <pre><code>::: myClass\n    options:\n        show_bases: false\n</code></pre>"},{"location":"usage/configuration/general/#myClass","title":"<code>myClass</code>","text":"<p>               Bases: <code>myParent</code></p> <p>Docstring of myClass.</p>"},{"location":"usage/configuration/general/#myClass","title":"<code>myClass</code>","text":"<p>Docstring of myClass.</p>"},{"location":"usage/configuration/general/#show_inheritance_diagram","title":"<code>show_inheritance_diagram</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the inheritance diagram of a class using Mermaid.</p> <p>With this option enabled, an inheritance diagram (as a flowchart) will be displayed after a class  signature. Each node will act as a cross-reference and will bring you to the relevant class' documentation when clicking on it.</p> <p>It should work out of the box with Material for MkDocs, but it is recommended to follow the setup guide for optimal support in Material for Mkdocs. For other themes, you must either setup mkdocs-mermaid2, or include Mermaid's Javascript code manually:</p> mkdocs.yml<pre><code>extra_javascript:\n- https://unpkg.com/mermaid@10.9.0/dist/mermaid.min.js\n</code></pre> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_inheritance_diagram: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n        show_inheritance_diagram: false\n</code></pre>  Source files myClass.m<pre><code>classdef myClass &lt; myParent\n    % Docstring of myClass.\nend\n</code></pre> myParent.m<pre><code>classdef (Abstract) myParent &lt; handle &amp; double\n    % An abstract class that defines the interface for a parent class\nend\n</code></pre> Preview <pre><code>flowchart TB\n   myClass[myClass]\n   handle[handle]\n   double[double]\n   myParent[myParent]\n   myParent --&gt; myClass\n   double --&gt; myParent\n   handle --&gt; myParent</code></pre> <p>Docstring of myClass.</p>"},{"location":"usage/configuration/general/#show_source","title":"<code>show_source</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the source code of this object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_source: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_source: false\n</code></pre> <code>myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre> Preview with sourcewithout bases <pre><code>::: myfunction\n    options:\n        show_source: true\n</code></pre> <pre><code>::: myfunction\n    options:\n        show_source: false\n</code></pre>"},{"location":"usage/configuration/general/#myfunction","title":"<code>myfunction(x)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required Source code in <code>docs/snippets/myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre>"},{"location":"usage/configuration/general/#myfunction","title":"<code>myfunction(x)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/headings/","title":"Headings options","text":""},{"location":"usage/configuration/headings/#heading_level","title":"<code>heading_level</code>","text":"<ul> <li> Type <code>int</code> <code>2</code></li> </ul> <p>The initial heading level to use.</p> <p>When injecting documentation for an object, the object itself and its members are rendered. For each layer of objects, we increase the heading level by 1.</p> <p>The initial heading level will be used for the first layer. If you set it to 3, then headings will start with <code>&lt;h3&gt;</code>.</p> <p>If the heading for the root object is not shown, then the initial heading level is used for its members.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          heading_level: 2\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      heading_level: 3\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With level 3 and root headingWith level 3, without root heading <p><code>mynamespace</code> (3) <p>Docstring of the package namespace.</p> <code>ClassA</code> (4) <p>Docstring of class A.</p> <code>ClassB</code> (4) <p>Docstring of class B.</p> <code>myfunction</code> (5) <p>Docstring of the function.</p></p> <p><p>Docstring of the package namespace.</p> <code>ClassA</code> (3) <p>Docstring of class A.</p> <code>ClassB</code> (3) <p>Docstring of class B.</p> <code>myfunction</code> (4) <p>Docstring of the function.</p></p>"},{"location":"usage/configuration/headings/#parameter_headings","title":"<code>parameter_headings</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to render headings for function/method parameters.</p> <p>With this option enabled, each function/method parameter (including parameters of the constructor methods merged in their parent class with the <code>merge_constructor_into_class</code> option) gets a permalink, an entry in the Table of Contents, and an entry in the generated objects inventory. The permalink and inventory entry allow cross-references from internal and external pages.</p> <p>The identifier used in the permalink and inventory is of the following form: <code>path.to.function(param_name)</code>. To manually cross-reference a arameter, you can therefore use this Markdown syntax:</p> <pre><code>- Class parameter: [`param`][package.module.Class(param)]\n- Method parameter: [`param`][package.module.Class.method(param)]\n- Function parameter: [`param`][package.module.function(param)]\n- Variadic positional parameters: [`*args`][package.module.function(*args)]\n- Variadic keyword parameters: [`**kwargs`][package.module.function(**kwargs)]\n</code></pre> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          parameter_headings: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      parameter_headings: true\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview: Cross-references With parameter headingsWithout parameter headings <pre><code>::: mynamespace.typed_function\n    options:\n      parameter_headings: true\n</code></pre> <pre><code>::: mynamespace.typed_function\n    options:\n      parameter_headings: false\n</code></pre> Preview: Parameter sections Table styleList styleSpacy style <p>Parameters:</p> Name Type Description Default <code>string</code> <p>The input variable</p> required <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p> <p>Parameters:</p> <ul> <li> </li> </ul> <p>Name-Value Arguments:</p> <ul> <li> <code>keyword</code>               (<code>double</code>)           \u2013            <p>An optional keyword argument</p> </li> </ul> PARAMETER DESCRIPTION <p>The input variable</p> <p> TYPE: <code>string</code> </p> NAME-VALUE ARGUMENTS DESCRIPTION <code>keyword</code> <p>An optional keyword argument</p> <p> TYPE: <code>double</code> </p> Preview: Table of contents (with symbol types) <p><code></code> typed_function <code></code> input</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>mynamespace.typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Parameters:</p> <p>Name-Value Arguments:</p> <ul> <li> <code>keyword</code>               (<code>double</code>)           \u2013            <p>An optional keyword argument</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>output</code> (              <code>char</code> )          \u2013            <p>The output variable</p> </li> </ul>"},{"location":"usage/configuration/headings/#mynamespace.typed_function(input)","title":"<code>input</code>","text":"(<code>string</code>)           \u2013            <p>The input variable</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>mynamespace.typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>string</code>)           \u2013            <p>The input variable</p> </li> </ul> <p>Name-Value Arguments:</p> <ul> <li> <code>keyword</code>               (<code>double</code>)           \u2013            <p>An optional keyword argument</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>output</code> (              <code>char</code> )          \u2013            <p>The output variable</p> </li> </ul>"},{"location":"usage/configuration/headings/#mynamespace.typed_function(input)","title":"<code>input</code>","text":""},{"location":"usage/configuration/headings/#mynamespace.typed_function(input)","title":"<code>input</code>","text":"(<code>string</code>)           \u2013            <p>The input variable</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function(input)","title":"<code>input</code>","text":""},{"location":"usage/configuration/headings/#show_root_heading","title":"<code>show_root_heading</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>).</p> <p>It is pretty common to inject documentation for one module per page. Since each page already has a title, usually being the module's name, we can spare one heading level by not showing the heading for the module itself (heading levels are limited to 6 by the HTML specification).</p> <p>Sparing that extra level can be helpful when your objects tree is deeply nested (e.g. method in a class in a class in a module). If your objects tree is not deeply nested, and you are injecting documentation for many different objects on a single page, it might be preferable to render the heading of each object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_root_heading: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mynamespace.ClassA\n    options:\n      show_root_heading: true\n\n::: mynamespace.ClassB\n    options:\n      show_root_heading: true\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With root headingWithout root heading <p>Docstring of class A.</p> <p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>mynamespace.classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>mynamespace.classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_root_toc_entry","title":"<code>show_root_toc_entry</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>If the root heading is not shown, at least add a ToC entry for it.</p> <p>If you inject documentation for an object in the middle of a page, after long paragraphs, and without showing the root heading, then you will not be able to link to this particular object as it won't have a permalink and will be \"lost\" in the middle of text. In that case, it is useful to add a hidden anchor to the document, which will also appear in the table of contents.</p> <p>In other cases, you might want to disable the entry to avoid polluting the ToC. It is not possible to show the root heading and hide the ToC entry.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_root_toc_entry: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>## Some heading\n\nLots of text.\n\n::: matlab_callable\n    options:\n      show_root_toc_entry: false\n\n## Other heading.\n\nMore text.\n</code></pre> Preview With ToC entryWithout ToC entry <pre><code>::: matlab_callable\n    options:\n      show_root_toc_entry: true\n</code></pre> <p>Table of contents Some heading <code>matlab_callable</code> Other heading </p> <pre><code>::: matlab_callable\n    options:\n      show_root_toc_entry: false\n</code></pre> <p>Table of contents Some heading Other heading</p>"},{"location":"usage/configuration/headings/#show_root_full_path","title":"<code>show_root_full_path</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the full namespace path for the root object heading.</p> <p>The namespace path of a MATLAB object is the dot-separated list of names under which it is accessible, for example <code>namespace.Class.method</code>.</p> <p>With this option you can choose to show the full path of the object you inject documentation for, or just its name. This option impacts only the object you specify, not its members. For members, see the two other options <code>show_root_members_full_path</code> and <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_root_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mynamespace.classA\n    options:\n      show_root_full_path: false\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With root full pathWithout root full path <pre><code>::: mynamespace.classA\n    options:\n      show_root_full_path: true\n</code></pre> <pre><code>::: mynamespace.classA\n    options:\n      show_root_full_path: false\n</code></pre>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>mynamespace.classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_root_members_full_path","title":"<code>show_root_members_full_path</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full namespace path of the root members.</p> <p>This option does the same thing as <code>show_root_full_path</code>, but for direct members  of the root object instead of the root object itself.</p> <p>To show the full path for every member recursively, see <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_root_members_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mynamespace.classA\n    options:\n      show_root_members_full_path: false\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With root members full pathWithout root members full path <pre><code>::: mynamespace.classA\n    options:\n      show_root_members_full_path: true\n</code></pre> <pre><code>::: mynamespace.classA\n    options:\n      show_root_members_full_path: false\n</code></pre>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>mynamespace.classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>mynamespace.classA.method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>mynamespace.classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#show_object_full_path","title":"<code>show_object_full_path</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full namespace path of every object.</p> <p>Same as for <code>show_root_members_full_path</code>, but for every member, recursively. This option takes precedence over <code>show_root_members_full_path</code>:</p> <code>show_root_members_full_path</code> <code>show_object_full_path</code> Direct root members path False False Name only False True Full True False Full True True Full in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_object_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: +mynamespace\n    options:\n      show_object_full_path: false\n</code></pre> Preview With object full pathWithout object full path <pre><code>::: +mynamespace\n    options:\n      show_object_full_path: true\n</code></pre> <pre><code>::: +mynamespace\n    options:\n      show_object_full_path: false\n</code></pre>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>mynamespace.classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>mynamespace.classB.prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>mynamespace.classB.method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>mynamespace.classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>mynamespace.classA.method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>mynamespace.typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#show_category_heading","title":"<code>show_category_heading</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When grouped by categories, show a heading for each category. These category headings will appear in the table of contents, allowing you to link to them using their permalinks.</p> <p>Not recommended with deeply nested object</p> <p>When injecting documentation for deeply nested objects, you'll quickly run out of heading levels, and the objects at the bottom of the tree risk all getting documented using H6 headings, which might decrease the readability of your API docs. </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          group_by_category: true\n          show_category_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      group_by_category: true\n      show_category_heading: false\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With category headingsWithout category headings <pre><code>::: +mynamespace\n    options:\n      group_by_category: true\n      show_category_heading: true\n</code></pre> <pre><code>::: +mynamespace\n    options:\n      group_by_category: true\n      show_category_heading: false\n</code></pre>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace-classes","title":"Classes","text":""},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB-attributes","title":"Attributes","text":"<code>prop_b</code> \u00a4 <p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB-functions","title":"Functions","text":"<code>method_b()</code> \u00a4 <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA-functions","title":"Functions","text":"<code>method_a()</code> \u00a4 <p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace-functions","title":"Functions","text":""},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#show_symbol_type_heading","title":"<code>show_symbol_type_heading</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in headings.</p> <p>This option will prefix headings with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_toc</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocs-material-matlab # (1)\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_symbol_type_heading: true\n</code></pre> <ol> <li> When using material theme, make sure to also enable the plugin <code>mkdocs-material-matlab</code> such that the right heading types are displayed. Otherwise, <code></code> will be shown as <code>attr</code> and <code></code> will be shown as <code>mod</code>, as the mkdocstrings-matlab plugin is reusing assets from mkdocstrings-python. </li> </ol> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_symbol_type_heading: false\n</code></pre> Source files  tree <code>readme.md</code> <code>classA.m</code> <code>classB.m</code> <code>typed_function.m</code> <pre><code>\ud83d\udcc1 +mynamespace\n\u251c\u2500\u2500 \ud83d\udcc4 readme.md\n\u251c\u2500\u2500 \ud83d\udcc4 classA.m\n\u251c\u2500\u2500 \ud83d\udcc4 classB.m\n\u2514\u2500\u2500 \ud83d\udcc4 typed_function.m\n</code></pre> <pre><code>This is the docstring for mynamespace.\n</code></pre> <pre><code>classdef classA\n    % Docstring of class A.\n\n    methods\n        function obj = method_a(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>classdef classB\n    % Docstring of class B.\n    properties\n        prop_b   % Docstring of the property.\n    end\n    methods\n        function obj = method_b(inputArg1)\n            % Docstring of the method.\n        end\n    end\nend\n</code></pre> <pre><code>function output = typed_function(input, options)\n    % Example function with typed inputs and outputs\n    arguments (Input)\n        input (1,1) string % The input variable\n        options.keyword (1,1) double = 0 % An optional keyword argument\n    end\n    arguments (Output)\n        output (1,:) char % The output variable\n    end\n    output = char(input);\nend\n</code></pre> Preview With symbol type in headingsWithout symbol type in headings <pre><code>::: +mynamespace\n    options:\n      show_symbol_type_heading: true\n</code></pre> <pre><code>::: +mynamespace\n    options:\n      show_symbol_type_heading: false\n</code></pre>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#mynamespace","title":"<code>mynamespace</code>","text":"<p>This is the docstring for mynamespace.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB","title":"<code>classB</code>","text":"<p>Docstring of class B.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.prop_b","title":"<code>prop_b</code>","text":"<p>Docstring of the property.</p>"},{"location":"usage/configuration/headings/#mynamespace.classB.method_b","title":"<code>method_b()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA","title":"<code>classA</code>","text":"<p>Docstring of class A.</p>"},{"location":"usage/configuration/headings/#mynamespace.classA.method_a","title":"<code>method_a()</code>","text":"<p>Docstring of the method.</p>"},{"location":"usage/configuration/headings/#mynamespace.typed_function","title":"<code>typed_function(input, /, *, keyword=0)</code>","text":"<p>Example function with typed inputs and outputs</p> <p>Name-Value Arguments:</p> Name Type Description <code>keyword</code> <code>double</code> <p>An optional keyword argument</p>"},{"location":"usage/configuration/headings/#show_symbol_type_toc","title":"<code>show_symbol_type_toc</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in the Table of Contents.</p> <p>This option will prefix items in the ToC with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_heading</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocs-material-matlab # (1)\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_symbol_type_toc: true\n</code></pre> <ol> <li> When using material theme, make sure to also enable the plugin <code>mkdocs-material-matlab</code> such that the right heading types are displayed. Otherwise, <code></code> will be shown as <code>attr</code> and <code></code> will be shown as <code>mod</code>, as the mkdocstrings-matlab plugin is reusing assets from mkdocstrings-python. </li> </ol> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_symbol_type_toc: false\n</code></pre> Preview With symbol type in ToCWithout symbol type in ToC <p><ul> <li><code></code> namespace</li> <li><code></code> function</li> <li><code></code> Class     <ul> <li><code></code> method</li> <li><code></code> property</li> </ul> </li> </ul></p> <p><ul> <li>namespace</li> <li>function</li> <li>Class     <ul> <li>method</li> <li>property</li> </ul> </li> </ul></p>"},{"location":"usage/configuration/members/","title":"Members options","text":""},{"location":"usage/configuration/members/#members","title":"<code>members</code>","text":"<ul> <li> Type <code>list[str] |     bool | None</code> <code>None</code></li> </ul> <p>An explicit list of members to render.</p> <p>Only members declared in this list will be rendered. A member without a docstring will still be rendered, even if <code>show_if_no_docstring</code> is set to false.</p> <p>The members will be rendered in the specified order, regardless of the value of <code>members_order</code>. Note that members will still be grouped by category, according to the <code>group_by_category</code> option.</p> <p>Passing a falsy value (<code>no</code>, <code>false</code> in YAML) or an empty list (<code>[]</code>) will tell the MATLAB handler not to render any member. Passing a truthy value (<code>yes</code>, <code>true</code> in YAML) will tell the MATLAB handler to render every member.</p> <p>Any given value, except for an explicit <code>None</code> (<code>null</code> in YAML) will tell the handler to ignore <code>filters</code> for the object's members. Filters will still be applied to the next layers of members (grand-children).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          members:\n          - hello  # (1)\n</code></pre> <ol> <li> Most of the time it won't make sense to use this option at the global level.</li> </ol> or in docs/some_page.md (local configuration)<pre><code>::: +mymembers\n    options:\n      members:\n      - ThisClass\n      - this_function\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With <code>members: true</code>With <code>members: false</code> or <code>members: []</code>With <code>members: [ThisClass]</code> <pre><code>::: +mymembers\n    options:\n      members: true\n</code></pre> <pre><code>::: +mymembers\n    options:\n      members: false\n</code></pre> <pre><code>::: +mymembers\n    options:\n      members: [ThisClass]\n</code></pre> <p>Info</p> <p>The default behavior (with unspecified <code>members</code> or <code>members: null</code>) is to use <code>filters</code>.</p>"},{"location":"usage/configuration/members/#mymembers","title":"<code>mymembers</code>","text":"<p>This is the namespace docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass","title":"<code>BaseClass</code>  <code>Abstract</code>","text":"<p>Base class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass.from_base","title":"<code>from_base(input)</code>","text":"<p>Base method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.this_function","title":"<code>this_function()</code>","text":"<p>Function docstring</p>"},{"location":"usage/configuration/members/#mymembers","title":"<code>mymembers</code>","text":"<p>This is the namespace docstring.</p>"},{"location":"usage/configuration/members/#mymembers","title":"<code>mymembers</code>","text":"<p>This is the namespace docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#hidden_members","title":"<code>hidden_members</code>","text":"<ul> <li> Type <code>list[str] |     bool</code> <code>False</code></li> </ul> <p>MATLAB's classes, methods and properties can be hidden by setting its attributes to <code>Hidden</code> or <code>Hidden=true</code>. By default, members that are specified as hidden will not be documented. </p> <p>This takes precedence over <code>members</code> and <code>filters</code>, and also applies for <code>inherited_members</code>. This means that for any hidden member to be shown, <code>hidden_members</code> must be enabled, and further selection is possible via <code>members</code> and <code>filters</code>. Hidden members will be labeled <code>Hidden</code>, this can be disabled in <code>show_labels</code>. </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          hidden_members: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      hidden_members: true\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With <code>hidden_members: true</code>With <code>hidden_members: false</code> or <code>hidden_members: []</code>With <code>hidden_members: ['hidden_method']</code> <pre><code>::: mymembers.ThisClass\n    options:\n      hidden_members: true\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      hidden_members: false\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      hidden_members: ['hidden_method']\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.hidden_property","title":"<code>hidden_property</code>  <code>Hidden</code>","text":"<p>Hidden property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.hidden_method","title":"<code>hidden_method(input)</code>  <code>Hidden</code>","text":"<p>Hidden method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.hidden_method","title":"<code>hidden_method(input)</code>  <code>Hidden</code>","text":"<p>Hidden method docstring</p>"},{"location":"usage/configuration/members/#private_members","title":"<code>private_members</code>","text":"<ul> <li> Type <code>list[str] |     bool</code> <code>False</code></li> </ul> <p>MATLAB's methods and properties can be set to private via the <code>Access</code> attribute, and additionally via the <code>SetAccess</code> and <code>GetAccess</code> attributes for properties. The possible settings for these attributes are </p> <ol> <li>public</li> <li>protected</li> <li>private</li> <li>immutable (only for <code>SetAccess</code>)</li> <li>List of classes that have access to the current method or property. </li> </ol> <p>To simplify the definition here, any property or method that do not have attribute <code>Access</code> set to public is considered a private member. If the <code>GetAccess</code> and/or <code>SetAccess</code> attribute is set in stead of <code>Access</code> for a property, it is consisered a private member if either the <code>SetAccess</code> attribute is not public or immutable or if the <code>GetAccess</code> attribute is not public. </p> <pre><code>flowchart TD\na[Access=public]\nsg[SetAccess=public/immutable and GetAccess=public]\n\npublic[not private member]\nprivate[private member]\na -- yes --&gt; public \na -- no --&gt; private\na -- \"not specified\" --&gt; sg\nsg -- no --&gt; private\nsg -- yes --&gt; public\n</code></pre> <p>This takes precedence over <code>members</code> and <code>filters</code>, and also applies for <code>inherited_members</code>. This means that for any private member to be shown, <code>private_members</code> must be enabled, and further selection is possible via <code>members</code> and <code>filters</code>. Private members will be labeled with it access attribute setting, this can be disabled in <code>show_labels</code>. </p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          private_members: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      private_members: true\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With <code>private_members: true</code>With <code>private_members: false</code> or <code>private_members: []</code>With <code>private_members: ['private_property']</code> <pre><code>::: mymembers.ThisClass\n    options:\n      private_members: true\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      private_members: false\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      private_members: ['private_property']\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_property","title":"<code>private_property</code>  <code>SetAccess=private</code>","text":"<p>Private property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_method","title":"<code>private_method(input)</code>  <code>Access=private</code>","text":"<p>Private method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_property","title":"<code>private_property</code>  <code>SetAccess=private</code>","text":"<p>Private property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#inherited_members","title":"<code>inherited_members</code>","text":"<ul> <li> Type <code>list[str] |     bool</code> <code>False</code></li> </ul> <p>An explicit list of inherited members (for classes) to render.</p> <p>Inherited members are always fetched from classes that are in the same namespace as the currently rendered class. Otherwise, it must be ensured that the paths to the parent is included in paths. This is also the case for MATLAB built-in classes. </p> <p>Passing a falsy value (<code>no</code>, <code>false</code> in YAML) or an empty list (<code>[]</code>) will tell the MATLAB handler not to render any inherited member. Passing a truthy value (<code>yes</code>, <code>true</code> in YAML) will tell the MATLAB handler to render every inherited member.</p> <p>When all inherited members are selected with <code>inherited_members: true</code>, it is possible to specify both members and inherited members in the <code>members</code> list:</p> <pre><code>inherited_members: true\nmembers:\n- inherited_member_a\n- inherited_member_b\n- member_x\n- member_y\n</code></pre> <p>The alternative is not supported:</p> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers:\n- member_x\n- member_y\n</code></pre> <p>...because it would make members ordering ambiguous/unspecified.</p> <p>You can render inherited members only by setting <code>inherited_members: true</code> (or a list of inherited members) and setting <code>members: false</code>:</p> <pre><code>inherited_members: true\nmembers: false\n</code></pre> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers: false\n</code></pre> <p>You can render all declared members and all or specific inherited members by leaving <code>members</code> as null (default):</p> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\n# members: null  # (1)\n</code></pre> <ol> <li>In this case, only declared members will be subject to further filtering with <code>filters</code> and <code>docstrings</code>.</li> </ol> <pre><code>inherited_members: true  # (1)\n# members: null\n</code></pre> <ol> <li>In this case, both declared and inherited members will be subject to further filtering with <code>filters</code> and <code>docstrings</code>.</li> </ol> <p>You can render all declared members and all or specific inherited members, avoiding further filtering with <code>filters</code> and <code>docstrings</code> by setting <code>members: true</code>:</p> <pre><code>inherited_members: true\nmembers: true\n</code></pre> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers: true\n</code></pre> <p>The general rule is that declared or inherited members specified in lists are never filtered out.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          inherited_members: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      inherited_members: true\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With inherited membersWithout inherited members <pre><code>::: mymembers.ThisClass\n    options:\n      inherited_members: true\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      inherited_members: false\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.from_base","title":"<code>from_base(input)</code>","text":"<p>Base method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#members_order","title":"<code>members_order</code>","text":"<ul> <li> Type <code>str</code> <code>\"alphabetical\"</code></li> </ul> <p>The members ordering to use. Possible values:</p> <ul> <li><code>alphabetical</code>: order by the members names.</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul> <p>The order applies for all members, recursively. The order will be ignored for members that are explicitely sorted using the <code>members</code> option. Note that members will still be grouped by category, according to the <code>group_by_category</code> option.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          members_order: alphabetical\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      members_order: source\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With alphabetical orderWith source order <pre><code>::: mymembers.ThisClass\n    options:\n      members_order: alphabetical\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      members_order: source\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#filters","title":"<code>filters</code>","text":"<ul> <li> Type <code>list[str] | None</code> <code>[\"!^delete$|^disp$\"]</code></li> </ul> <p>A list of filters applied to filter objects based on their name.</p> <p>Filters are regular expressions. These regular expressions are evaluated by Python and so must match the syntax supported by the <code>re</code> module. A filter starting with <code>!</code> (negative filter) will exclude matching objects instead of including them.</p> <p>The default value (<code>[!^delete$|^disp$]</code>) means: *render every object, except for members that are named <code>delete</code> or <code>disp</code>, which are two of MATLAB classes' built-in methods. </p> <p>Each filter takes precedence over the previous one. This allows for fine-grain selection of objects by adding more specific filters. For example, you can start by unselecting objects that start with <code>_</code>, and add a second filter that re-select objects that start with <code>__</code>. The default filters can therefore be rewritten like this:</p> <pre><code>filters:\n- \"!^_\"\n- \"^__\"\n</code></pre> <p>If there are no negative filters, the handler considers that everything is unselected first, and then selects things based on your positive filters. If there is at least one negative filter, the handler considers that everything is selected first, and then re-selects/unselects things based on your other filters. In short, <code>filters: [\"a\"]</code> means \"keep nothing except names containing <code>a</code>\", while <code>filters: [\"!a\"]</code> means \"keep everything except names containing <code>a</code>\".</p> <p>An empty list of filters tells the MATLAB handler to render every object. The <code>members</code> option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          filters:\n          - \"!^delete$|^disp$\"\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      filters: []\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With <code>filters: []</code>With <code>filters: [\"method\"]</code>With <code>filters: [\"!method\"]</code> <pre><code>::: mymembers.ThisClass\n    options:\n      filters: []\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      filters: [\"method\"]\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      filters: [\"!method\"]\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.delete","title":"<code>delete()</code>","text":"<p>Destructor docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.delete","title":"<code>delete()</code>","text":"<p>Destructor docstring</p>"},{"location":"usage/configuration/members/#group_by_category","title":"<code>group_by_category</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Group the object members by categories: properties, classes, functions, and namespaces.</p> <p>Members within a same category will be ordered according to the <code>members_order</code> option. You can use the <code>show_category_heading</code> option to also render a heading for each category.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          group_by_category: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: +mymembers\n    options:\n      group_by_category: false\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With category groupingWithout category grouping <pre><code>::: +mymembers\n    options:\n      group_by_category: true\n</code></pre> <pre><code>::: +mymembers\n    options:\n      group_by_category: False\n</code></pre>"},{"location":"usage/configuration/members/#mymembers","title":"<code>mymembers</code>","text":"<p>This is the namespace docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass","title":"<code>BaseClass</code>  <code>Abstract</code>","text":"<p>Base class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass.from_base","title":"<code>from_base(input)</code>","text":"<p>Base method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.this_function","title":"<code>this_function()</code>","text":"<p>Function docstring</p>"},{"location":"usage/configuration/members/#mymembers","title":"<code>mymembers</code>","text":"<p>This is the namespace docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass","title":"<code>BaseClass</code>  <code>Abstract</code>","text":"<p>Base class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.BaseClass.from_base","title":"<code>from_base(input)</code>","text":"<p>Base method docstring</p>"},{"location":"usage/configuration/members/#mymembers.this_function","title":"<code>this_function()</code>","text":"<p>Function docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#summary","title":"<code>summary</code>","text":"<ul> <li> Type <code>bool | dict[str, bool]</code> <code>False</code></li> </ul> <p>Whether to render summaries of namespaces, classes, functions (methods) and properties.</p> <p>This option accepts a boolean (<code>yes</code>, <code>true</code>, <code>no</code>, <code>false</code> in YAML) or a dictionary with one or more of the following keys: <code>namespaces</code>, <code>functions</code>, <code>classes</code>, <code>properties</code>, with booleans as values. Class methods summary is (de)activated with the <code>functions</code> key. By default, <code>summary</code> is false, and by extension all values are false.</p> <p>Examples:</p> <pre><code>summary: true\n</code></pre> <pre><code>summary: false\n</code></pre> <pre><code>summary:\n  properties: false\n  functions: true\n  namespaces: false\n</code></pre> <p>Summaries will be rendered as the corresponding docstring sections. For example, the summary for attributes will be rendered as an Attributes docstring section. The section will be rendered in accordance with the <code>docstring_section_style</code> option. If the objects appearing in the summary are also rendered on the page (or somewhere else on the site), their name will automatically link to their rendered documentation.</p> <p>Hidden and private members will not be rendered in the summary, no matter the setting in <code>hidden_members</code> and <code>private_members</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          summary: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      summary: false\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview Without summaryWith all summariesWith methods summary only <pre><code>::: mymembers.ThisClass\n    options:\n      summary: false\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      summary: true\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      summary:\n        functions: true\n</code></pre> <p>Warning</p> <p>In the summary, the title of the properties summary will be attributes, and the title of the namespaces summary will be modules. This is due to mkdocstrings-matlab's dependency on mkdocstrings-python. For now, mkdocstrings-matlab does not implement its own Jinja templates for rendering, leading to these summary titles. </p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p> <p>Methods:</p> Name Description <code>other_method</code> <p>Method docstring</p> <code>method</code> <p>Method docstring</p> <p>Attributes:</p> Name Type Description <code>public_property</code> <p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p> <p>Methods:</p> Name Description <code>other_method</code> <p>Method docstring</p> <code>method</code> <p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#show_labels","title":"<code>show_labels</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to show labels of the members.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_labels: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: mymembers.ThisClass\n    options:\n      show_labels: false\n</code></pre> Source files  tree <code>Contents.m</code> <code>ThisClass.m</code> <code>BaseClass.m</code> <code>this_function.m</code> <pre><code>\ud83d\udcc1 +mymembers\n\u251c\u2500\u2500 \ud83d\udcc4 Contents.m\n\u251c\u2500\u2500 \ud83d\udcc4 BaseClass.m\n\u251c\u2500\u2500 \ud83d\udcc4 ThisClass.m\n\u2514\u2500\u2500 \ud83d\udcc4 this_function.m\n</code></pre> <pre><code>% This is the namespace docstring.\n</code></pre> <pre><code>classdef ThisClass &lt; mymembers.BaseClass\n    % Class docstring.\n    methods\n        function obj = other_method(obj, input)\n            % Method docstring\n        end\n        function obj = method(obj, input)\n            % Method docstring\n        end\n        function delete(obj)\n            % Destructor docstring\n        end\n    end\n\n    properties\n        public_property % Public property docstring\n    end\n\n    methods (Hidden)\n        function obj = hidden_method(obj, input)\n            % Hidden method docstring\n        end\n    end\n\n    methods (Access = private)\n        function obj = private_method(obj, input)\n            % Private method docstring\n        end\n    end\n\n    properties (Hidden)\n        hidden_property % Hidden property docstring\n    end\n\n    properties (SetAccess = private)\n        private_property % Private property docstring\n    end\nend\n</code></pre> <pre><code>classdef (Abstract) BaseClass\n% Base class docstring.\n    methods\n        function obj = from_base(obj, input)\n            % Base method docstring\n        end\n    end\nend\n</code></pre> <pre><code>function this_function()\n    % Function docstring\nend\n</code></pre> Preview With show labelsWithout show labels <pre><code>::: mymembers.ThisClass\n    options:\n      private_members: true\n      show_labels: true\n</code></pre> <pre><code>::: mymembers.ThisClass\n    options:\n      private_members: true\n      show_labels: false\n</code></pre>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_property","title":"<code>private_property</code>  <code>SetAccess=private</code>","text":"<p>Private property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_method","title":"<code>private_method(input)</code>  <code>Access=private</code>","text":"<p>Private method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass","title":"<code>mymembers.ThisClass</code>","text":"<p>               Bases: <code>mymembers.BaseClass</code></p> <p>Class docstring.</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.public_property","title":"<code>public_property</code>","text":"<p>Public property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_property","title":"<code>private_property</code>","text":"<p>Private property docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.other_method","title":"<code>other_method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.method","title":"<code>method(input)</code>","text":"<p>Method docstring</p>"},{"location":"usage/configuration/members/#mymembers.ThisClass.private_method","title":"<code>private_method(input)</code>","text":"<p>Private method docstring</p>"},{"location":"usage/configuration/signatures/","title":"Signatures options","text":""},{"location":"usage/configuration/signatures/#show_signature","title":"<code>show_signature</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show methods and functions signatures.</p> <p>Without it, just the function/method name is rendered.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_signature: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: matlab_callable\n    options:\n      show_signature: false\n</code></pre> <code>myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre> Preview With signatureWithout signature <pre><code>::: myfunction\n    options:\n      show_signature: true\n</code></pre> <pre><code>::: myfunction\n    options:\n      show_signature: false\n</code></pre>"},{"location":"usage/configuration/signatures/#myfunction","title":"<code>myfunction(x)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#myfunction","title":"<code>myfunction</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#show_signature_annotations","title":"<code>show_signature_annotations</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the type annotations in methods and functions signatures.</p> <p>Since the heading can become quite long when annotations are rendered, it is usually best to separate the signature from the heading.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          show_signature_annotations: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_signature_annotations: false\n</code></pre> <code>myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre> Preview With signature annotationsWithout signature annotations <pre><code>::: myfunction\n    options:\n      show_signature: true\n      show_signature_annotations: true\n</code></pre> <pre><code>::: myfunction\n    options:\n      show_signature: true\n      show_signature_annotations: false\n</code></pre>"},{"location":"usage/configuration/signatures/#myfunction","title":"<code>myfunction(x: myClass)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#myfunction","title":"<code>myfunction(x)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#separate_signature","title":"<code>separate_signature</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to put the whole signature in a code block below the heading.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          separate_signature: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n</code></pre> <code>myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre> Preview With separate signatureWithout separate signature <pre><code>::: myfunction\n    options:\n      show_signature: true\n      separate_signature: true\n</code></pre> <pre><code>::: myfunction\n    options:\n      show_signature: true\n      separate_signature: false\n</code></pre>"},{"location":"usage/configuration/signatures/#myfunction","title":"myfunction","text":"<pre><code>myfunction(x)\n</code></pre> <p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#myfunction","title":"<code>myfunction(x)</code>","text":"<p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#signature_crossrefs","title":"<code>signature_crossrefs</code>","text":"<p>Whether to render cross-references for type annotations in signatures.</p> <p>When signatures are separated from headings with the <code>separate_signature</code> option and type annotations are shown with the <code>show_signature_annotations</code> option, this option will render a cross-reference (link) for each type annotation in the signature.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      matlab:\n        options:\n          separate_signature: true\n          show_signature_annotations: true\n          signature_crossrefs: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      show_signature_annotations: true\n      signature_crossrefs: true\n</code></pre> <code>myfunction.m</code> <pre><code>function myfunction(x)\n    % Example function\n    arguments\n        x myClass % An instance of myClass\n    end\nend\n</code></pre> Preview With separate signatureWithout separate signature <pre><code>::: myfunction\n    options:\n      separate_signature: true\n      show_signature_annotations: true\n      signature_crossrefs: true\n</code></pre> <pre><code>::: myfunction\n    options:\n      separate_signature: true\n      show_signature_annotations: true\n      signature_crossrefs: false\n</code></pre>"},{"location":"usage/configuration/signatures/#myfunction","title":"myfunction","text":"<pre><code>myfunction(x: myClass)\n</code></pre> <p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/configuration/signatures/#myfunction","title":"myfunction","text":"<pre><code>myfunction(x: myClass)\n</code></pre> <p>Example function</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>myClass</code> <p>An instance of myClass</p> required"},{"location":"usage/docstrings/google/","title":"Google style","text":""},{"location":"usage/docstrings/google/#work-in-progress","title":"Work in Progress!","text":""},{"location":"usage/docstrings/google/#google-style-admonitions","title":"Google-style admonitions","text":"<p>With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example:</p> DocstringResult <pre><code>\"\"\"\nNote:\n    It looks like a section, but it will be rendered as an admonition.\n\nTip: You can even choose a title.\n    This admonition has a custom title!\n\"\"\"\n</code></pre> <p>NOTE: It looks like a section, but it will be rendered as an admonition.</p> <p>TIP: You can even choose a title. This admonition has a custom title!</p> <p>See Napoleon's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/numpy/","title":"Numpydoc style","text":""},{"location":"usage/docstrings/numpy/#work-in-progress","title":"Work in Progress!","text":"<p>NOTE: As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a <code>Methods</code> section in the class docstring (see #366).</p> <p>See Numpydoc's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/sphinx/","title":"Sphinx style","text":""},{"location":"usage/docstrings/sphinx/#work-in-progress","title":"Work in Progress!","text":"<p>See Sphinx's documentation. See the supported docstring sections on Griffe's documentation.</p>"}]}